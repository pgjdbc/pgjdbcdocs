<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on pgJDBC</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/</link><description>Recent content in Documentation on pgJDBC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Jun 2022 22:46:55 +0530</lastBuildDate><atom:link href="https://pgjdbc.github.io/pgjdbcdocs/documentation/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting up the JDBC Driver</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/setup/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/setup/</guid><description>This section describes the steps you need to take before you can write or run programs that use the JDBC interface.
Getting the Driver Precompiled versions of the driver can be downloaded from the PostgreSQL™ JDBC web site.
Alternatively you can build the driver from source, but you should only need to do this if you are making changes to the source code. To build the JDBC driver, you need gradle and a JDK (currently at least jdk1.</description></item><item><title>Initializing the Driver</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/use/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/use/</guid><description>This section describes how to load and initialize the JDBC driver in your programs.
Importing JDBC Any source that uses JDBC needs to import the java.sql package, using:
import java.sql.*; NOTE
You should not import the org.postgresql package unless you are not using standard PostgreSQL™ extensions to the JDBC API.
Loading the Driver Applications do not need to explicitly load the org.postgresql. Driver class because the pgJDBC driver jar supports the Java Service Provider mechanism.</description></item><item><title>Using SSL</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/ssl/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/ssl/</guid><description>Configuring the PostgreSQL™ server for SSL is covered in the main documentation, so it will not be repeated here. There are also instructions in the source certdir Before trying to access your SSL enabled server from Java, make sure you can get to it via psql. You should see output like the following if you have established a SSL connection.
$ ./bin/psql -h localhost -U postgres psql (9.6.2) SSL connection (protocol: TLSv1.</description></item><item><title>Issuing a Query and Processing the Result</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/query/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/query/</guid><description>Any time you want to issue SQL statements to the database, you require a Statement or PreparedStatement instance. Once you have a Statement or PreparedStatement , you can use issue a query. This will return a ResultSet instance, which contains the entire result (see the section called Getting results based on a cursor here for how to alter this behaviour). Example 5.1, “Processing a Simple Query in JDBC” illustrates this process.</description></item><item><title>Calling Stored Functions and Procedures</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/callproc/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/callproc/</guid><description>PostgreSQL™ supports two types of stored objects, functions that can return a result value and - starting from v11 - procedures that can perform transaction control. Both types of stored objects are invoked using CallableStatement and the standard JDBC escape call syntax {call storedobject(?)} . The escapeSyntaxCallMode connection property controls how the driver transforms the call syntax to invoke functions or procedures.
The default mode, select , supports backwards compatibility for existing applications and supports function invocation only.</description></item><item><title>Storing Binary Data</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/binary-data/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/binary-data/</guid><description>PostgreSQL™ provides two distinct ways to store binary data. Binary data can be stored in a table using the data type BYTEA or by using the Large Object feature which stores the binary data in a separate table in a special format and refers to that table by storing a value of type OID in your table.
In order to determine which method is appropriate you need to understand the limitations of each method.</description></item><item><title>JDBC escapes</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/escapes/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/escapes/</guid><description>The JDBC specification (like the ODBC specification) acknowledges the fact that some vendor specific SQL may be required for certain RDBMS features. To aid developers in writing portable JDBC applications across multiple database products, a special escape syntax is used to specify the generic commands the developer wants to be run. The JDBC driver translates these escape sequences into native syntax for its specific database. For more information consult the Java DB Technical Documentation.</description></item><item><title>PostgreSQL™ Extensions to the JDBC API</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/server-prepare/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/server-prepare/</guid><description>PostgreSQL™ is an extensible database system. You can add your own functions to the server, which can then be called from queries, or even add your own data types. As these are facilities unique to PostgreSQL™, we support them from Java, with a set of extension APIs. Some features within the core of the standard driver actually use these extensions to implement Large Objects, etc.
Accessing the Extensions To access some of the extensions, you need to use some extra methods in the org.</description></item><item><title>Using the Driver in a Multithreaded or a Servlet Environment</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/thread/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/thread/</guid><description>The PostgreSQL™ JDBC driver is not thread safe. The PostgreSQL server is not threaded. Each connection creates a new process on the server as such any concurrent requests to the process would have to be serialized. The driver makes no guarantees that methods on connections are synchronized. It will be up to the caller to synchronize calls to the driver.
A notable exception is org/postgresql/jdbc/TimestampUtils.java which is threadsafe.</description></item><item><title>Connection Pools and Data Sources</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/datasource/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/datasource/</guid><description>JDBC 2 introduced standard connection pooling features in an add-on API known as the JDBC 2.0 Optional Package (also known as the JDBC 2.0 Standard Extension). These features have since been included in the core JDBC 3 API.
The JDBC API provides a client and a server interface for connection pooling. The client interface is javax.sql.DataSource , which is what application code will typically use to acquire a pooled database connection.</description></item><item><title>Logging using java.util.logging</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/logging/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/logging/</guid><description>The PostgreSQL JDBC Driver supports the use of logging (or tracing) to help resolve issues with the pgJDBC Driver when is used in your application.
The pgJDBC Driver uses the logging APIs of java.util.logging that is part of Java since JDK 1.4, which makes it a good choice for the driver since it doesn&amp;rsquo;t add any external dependency for a logging framework. java.util.logging is a very rich and powerful tool, it&amp;rsquo;s beyond the scope of these docs to explain how to use it to it&amp;rsquo;s full potential, for that please refer to Java Logging Overview.</description></item><item><title>Further Reading</title><link>https://pgjdbc.github.io/pgjdbcdocs/documentation/reading/</link><pubDate>Sun, 19 Jun 2022 22:46:55 +0530</pubDate><guid>https://pgjdbc.github.io/pgjdbcdocs/documentation/reading/</guid><description>If you have not yet read it, you are advised you read the JDBC API Documentation (supplied with Oracle&amp;rsquo;s JDK) and the JDBC Specification. Both are available from here.
Docs contains updated information not included in this manual including Javadoc class documentation and a FAQ. Additionally it offers precompiled drivers.</description></item></channel></rss>