[{"categories":null,"content":"This section describes the steps you need to take before you can write or run programs that use the JDBC interface.\nGetting the Driver    Precompiled versions of the driver can be downloaded from the PostgreSQL™ JDBC web site.\nAlternatively you can build the driver from source, but you should only need to do this if you are making changes to the source code. To build the JDBC driver, you need gradle and a JDK (currently at least jdk1.8).\nIf you have several Java compilers installed, maven will use the first one on the path. To use a different one set JAVA_HOME to the Java version you wish to use For example, to use a different JDK than the default, this may work:\nJAVA_HOME = /usr/local/jdk1.8.0_45 To compile the driver simply run gradlew assemble or gradlew build if you want to run the tests in the top level directory.\n NOTE\nIf you want to skip test execution, add the option -DskipTests. The compiled driver will be placed in pgjdbc/build/libs postgresql-MM.nn.pp.jar\n Where MM is the major version, nn is the minor version and pp is the patch version. Versions for JDBC3 and lower can be found here\nThis is a very brief outline of how to build the driver. Much more detailed information can be found on the github repo\nEven though the JDBC driver should be built with Gradle, for situations, where use of Gradle is not possible, e.g., when building pgJDBC for distributions, the pgJDBC Gradle build provides a convenience source release artifact *-src.tar.gz - a Maven based project. The Maven based project contains a version of the JDBC driver with complete functionality, which can be used in production and is still validly buildable within the Maven build environment. The Maven-based project is created with gradlew -d :postgresql:sourceDistribution -Prelease. The produced *-src.tar.gz can be then found in pgjdbc/build/distributions/ directory. JDBC driver can be built from the Maven-based project with mvn package or, when the tests are to be skipped, with mvn -DskipTests package. Prefactored *-src.tar.gz s are released in the Maven central repository.\nSetting up the Class Path    To use the driver, the JAR archive named postgresql-MM.nn.pp.jar needs to be included in the class path, either by putting it in the CLASSPATH environment variable, or by using flags on the java command line.\nFor instance, assume we have an application that uses the JDBC driver to access a database, and that application is installed as /usr/local/lib/myapp.jar . The PostgreSQL™ JDBC driver installed as /usr/local/pgsql/share/java/postgresql-MM.nn.pp.jar . To run the application, we would use:\nexport CLASSPATH=/usr/local/lib/myapp.jar:/usr/local/pgsql/share/java/postgresql-42.2.15.jar:. java MyApp Current Java applications will likely use maven, gradle or some other package manager. Use this to search for the latest jars and how to include them in your project\nLoading the driver from within the application is covered in Initializing the Driver.\nPreparing the Database Server for JDBC    Out of the box, Java does not support unix sockets so the PostgreSQL server must be configured to allow TCP/IP connections. Starting with server version 8.0 TCP/IP connections are allowed from localhost . To allow connections to other interfaces than the loopback interface, you must modify the postgresql.conf file’s listen_addresses setting.\nOnce you have made sure the server is correctly listening for TCP/IP connections the next step is to verify that users are allowed to connect to the server. Client authentication is setup in pg_hba.conf . Refer to the main PostgreSQL™ documentation for details .\nCreating a Database    When creating a database to be accessed via JDBC it is important to select an appropriate encoding for your data. Many other client interfaces do not care what data you send back and forth, and will allow you to do inappropriate things, but Java makes sure that your data is correctly encoded. Do not use a database that uses the SQL_ASCII encoding. This is not a real encoding and you will have problems the moment you store data in it that does not fit in the seven bit ASCII character set. If you do not know what your encoding will be or are otherwise unsure about what you will be storing the UNICODE encoding is a reasonable default to use.\n","description":"","title":"Setting up the JDBC Driver","uri":"/pgjdbc/documentation/setup/"},{"categories":null,"content":"This section describes how to load and initialize the JDBC driver in your programs.\nImporting JDBC    Any source that uses JDBC needs to import the java.sql package, using:\nimport java.sql.*;  NOTE\nYou should not import the org.postgresql package unless you are not using standard PostgreSQL™ extensions to the JDBC API.\n Loading the Driver    Applications do not need to explicitly load the org.postgresql. Driver class because the pgJDBC driver jar supports the Java Service Provider mechanism. The driver will be loaded by the JVM when the application connects to PostgreSQL™ (as long as the driver’s jar file is on the classpath).\n NOTE\nPrior to Java 1.6, the driver had to be loaded by the application - either by calling Class.forName(\"org.postgresql.Driver\"); or by passing the driver class name as a JVM parameter java -Djdbc.drivers=org.postgresql.Driver example.ImageViewer\n These older methods of loading the driver are still supported but they are no longer necessary.\nConnecting to the Database    With JDBC, a database is represented by a URL (Uniform Resource Locator). With PostgreSQL, this takes one of the following forms:\n jdbc:postgresql:database jdbc:postgresql:/ jdbc:postgresql://host/database jdbc:postgresql://host/ jdbc:postgresql://host:port/database jdbc:postgresql://host:port/  The parameters have the following meanings:\n  host = The host name of the server. Defaults to localhost . To specify an IPv6 address your must enclose the host parameter with square brackets, for example: jdbc:postgresql://[::1]:5740/accounting\n  port = The port number the server is listening on. Defaults to the PostgreSQL™ standard port number (5432).\n  database = The database name. The default is to connect to a database with the same name as the user name.\n  To connect, you need to get a Connection instance from JDBC. To do this, you use the DriverManager.getConnection() method: Connection db = DriverManager.getConnection(url, username, password)\nConnection Parameters    In addition to the standard connection parameters the driver supports a number of additional properties which can be used to specify additional driver behaviour specific to PostgreSQL™. These properties may be specified in either the connection URL or an additional Properties object parameter to DriverManager.getConnection . The following examples illustrate the use of both methods to establish a SSL connection.\nIf a property is specified both in URL and in Properties object, the value from Properties object is ignored.\nString url = \"jdbc:postgresql://localhost/test\"; Properties props = new Properties(); props.setProperty(\"user\", \"fred\"); props.setProperty(\"password\", \"secret\"); props.setProperty(\"ssl\", \"true\"); Connection conn = DriverManager.getConnection(url, props); String url = \"jdbc:postgresql://localhost/test?user=fred\u0026password=secret\u0026ssl=true\"; Connection conn = DriverManager.getConnection(url);   user = String The database user on whose behalf the connection is being made.\n  password = String The database user’s password.\n  options = String Specify ‘options’ connection initialization parameter. For example setting this to -c statement_timeout=5min would set the statement timeout parameter for this session to 5 minutes.\n  The value of this property may contain spaces or other special characters, and it should be properly encoded if provided in the connection URL. Spaces are considered to separate command-line arguments, unless escaped with a backslash ( \\ ); \\\\ represents a literal backslash.\nProperties props = new Properties(); props.setProperty(\"options\", \"-c search_path=test,public,pg_catalog -c statement_timeout=90000\"); Connection conn = DriverManager.getConnection(url, props); String url = \"jdbc:postgresql://localhost:5432/postgres?options=-c%20search_path=test,public,pg_catalog%20-c%20statement_timeout=90000\"; Connection conn = DriverManager.getConnection(url);   ssl (boolean)\nConnect using SSL. The server must have been compiled with SSL support. This property does not need a value associated with it. The mere presence of it specifies a SSL connection. However, for compatibility with future versions, the value “true” is preferred. For more information see Using SSL.\nSetting up the certificates and keys for ssl connection can be tricky see The test documentation for detailed examples.\n  sslfactory(String)\nThe provided value is a class name to use as the SSLSocketFactory when establishing a SSL connection. For more information see the section called Custom SSLSocketFactory defaults to LibPQFactory\n  sslfactoryarg (String) : (deprecated)\nThis value is an optional argument to the constructor of the sslfactory class provided above. For more information see the section called Custom SSLSocketFactory.\n  sslmode (String)\npossible values include disable , allow , prefer , require , verify-ca and verify-full . require , allow and prefer all default to a non validating SSL factory and do not check the validity of the certificate or the host name. verify-ca validates the certificate, but does not verify the hostname. verify-full will validate that the certificate is correct and verify the host connected to has the same hostname as the certificate. Default is prefer Setting these will necessitate storing the server certificate on the client machine see Configuring the client for details.\n  sslcert (String)\nProvide the full path for the certificate file. Defaults to /defaultdir/postgresql.crt, where defaultdir is ${user.home}/.postgresql/ in *nix systems and %appdata%/postgresql/ on windows.\nIt can be a PEM encoded X509v3 certificate\n   NOTE\nThis parameter is ignored when using PKCS-12 keys, since in that case the certificate is also retrieved from the same keyfile.\n  sslkey (String)\nProvide the full path for the key file. Defaults to /defaultdir/postgresql.pk8.   NOTE\nThe key file must be in PKCS-12 or in PKCS-8 DER format. A PEM key can be converted to DER format using the openssl command: openssl pkcs8 -topk8 -inform PEM -in postgresql.key -outform DER -out postgresql.pk8 -v1 PBE-MD5-DES\n PKCS-12 key files are only recognized if they have the “.p12” (42.2.9+) or the “.pfx” (42.2.16+) extension.\nIf your key has a password, provide it using the sslpassword connection parameter described below. Otherwise, you can add the flag -nocrypt to the above command to prevent the driver from requesting a password.\n NOTE\nThe use of -v1 PBE-MD5-DES might be inadequate in environments where high level of security is needed and the key is not protected by other means (e.g. access control of the OS), or the key file is transmitted in untrusted channels. We are depending on the cryptography providers provided by the java runtime. The solution documented here is known to work at the time of writing. If you have stricter security needs, please see here for a discussion of the problem and information on choosing a better cipher suite.\n   sslrootcert (String)\nFile name of the SSL root certificate. Defaults to defaultdir/root.crt. It can be a PEM encoded X509v3 certificate\n  sslhostnameverifier (String)\nClass name of hostname verifier. Defaults to using org.postgresql.ssl.PGjdbcHostnameVerifier\n  sslpasswordcallback (String)\nClass name of the SSL password provider. Defaults to org.postgresql.ssl.jdbc4.LibPQFactory.ConsoleCallbackHandler\n  sslpassword (String)\nIf provided will be used by ConsoleCallbackHandler\n  protocolVersion (int)\nThe driver supports the V3 frontend/backend protocols. The V3 protocol was introduced in 7.4 and the driver will by default try to connect using the V3 protocol.\n  loggerLevel (String)\nThis property is no longer used by the driver and will be ignored. All logging configuration is handled by java.util.logging.\n  loggerFile (String)\nThis property is no longer used by the driver and will be ignored. All logging configuration is handled by java.util.logging.\n  allowEncodingChanges (boolean)\nWhen using the V3 protocol the driver monitors changes in certain server configuration parameters that should not be touched by end users. The client_encoding setting is set by the driver and should not be altered. If the driver detects a change it will abort the connection. There is one legitimate exception to this behaviour though, using the COPY command on a file residing on the server’s filesystem. The only means of specifying the encoding of this file is by altering the client_encoding setting. The JDBC team considers this a failing of the COPY command and hopes to provide an alternate means of specifying the encoding in the future, but for now there is this URL parameter. Enable this only if you need to override the client encoding when doing a copy.\n  logUnclosedConnections (boolean)\nClients may leak Connection objects by failing to call its close() method. Eventually these objects will be garbage collected and the finalize() method will be called which will close the Connection if caller has neglected to do this himself. The usage of a finalizer is just a stopgap solution. To help developers detect and correct the source of these leaks the logUnclosedConnections URL parameter has been added. It captures a stacktrace at each Connection opening and if the finalize() method is reached without having been closed the stacktrace is printed to the log.\n  autosave (String)\nSpecifies what the driver should do if a query fails. In autosave=always mode, JDBC driver sets a savepoint before each query, and rolls back to that savepoint in case of failure. In autosave=never mode (default), no savepoint dance is made ever. In autosave=conservative mode, savepoint is set for each query, however the rollback is done only for rare cases like ‘cached statement cannot change return type’ or ‘statement XXX is not valid’ so JDBC driver rollsback and retries The default is never\n  cleanupSavepoints (boolean)\nDetermines if the SAVEPOINT created in autosave mode is released prior to the statement. This is done to avoid running out of shared buffers on the server in the case where 1000’s of queries are performed. The default is ‘false’\n  binaryTransfer (boolean)\nUse binary format for sending and receiving data if possible. The default is ‘true’\n  binaryTransferEnable (String)\nA comma separated list of types to enable binary transfer. Either OID numbers or names.\n  binaryTransferDisable (String)\nA comma separated list of types to disable binary transfer. Either OID numbers or names. Overrides values in the driver default set and values set with binaryTransferEnable.\n  databaseMetadataCacheFields (int)\nSpecifies the maximum number of fields to be cached per connection. A value of 0 disables the cache. Defaults to 65536.\n  databaseMetadataCacheFieldsMiB (int)\nSpecifies the maximum size (in megabytes) of fields to be cached per connection. A value of 0 disables the cache. Defaults to 5.\n  prepareThreshold (int)\nDetermine the number of PreparedStatement executions required before switching over to use server side prepared statements. The default is five, meaning start using server side prepared statements on the fifth execution of the same PreparedStatement object. More information on server side prepared statements is available in the section called Server Prepared Statements.\n  preparedStatementCacheQueries (int)\nDetermine the number of queries that are cached in each connection. The default is 256, meaning if you use more than 256 different queries in prepareStatement() calls, the least recently used ones will be discarded. The cache allows application to benefit from Server Prepared Statements (see prepareThreshold ) even if the prepared statement is closed after each execution. The value of 0 disables the cache. N. B. Each connection has its own statement cache.\n  preparedStatementCacheSizeMiB (int)\nDetermine the maximum size (in mebibytes) of the prepared queries cache (see preparedStatementCacheQueries ). The default is 5, meaning if you happen to cache more than 5 MiB of queries the least recently used ones will be discarded. The main aim of this setting is to prevent OutOfMemoryError . The value of 0 disables the cache.\n  preferQueryMode (String)\nSpecifies which mode is used to execute queries to database: simple means (‘Q’ execute, no parse, no bind, text mode only), extended means always use bind/execute messages, extendedForPrepared means extended for prepared statements only, endedCacheEverything means use extended protocol and try cache every statement (including Statement.execute(String sql)) in a query cache. extended | extendedForPrepared | extendedCacheEverything | simple The default is extended\n  defaultRowFetchSize (int)\nDetermine the number of rows fetched in ResultSet by one fetch with trip to the database. Limiting the number of rows are fetch with each trip to the database allow avoids unnecessary memory consumption and as a consequence OutOfMemoryError . The default is zero, meaning that in ResultSet will be fetch all rows at once. Negative number is not available.\n  loginTimeout (int)\nSpecify how long to wait for establishment of a database connection. The timeout is specified in seconds.\n  connectTimeout (int)\nThe timeout value used for socket connect operations. If connecting to the server takes longer than this value, the connection is broken. The timeout is specified in seconds and a value of zero means that it is disabled.\n  socketTimeout (int)\nThe timeout value used for socket read operations. If reading from the server takes longer than this value, the connection is closed. This can be used as both a brute force global query timeout and a method of detecting network problems. The timeout is specified in seconds and a value of zero means that it is disabled.\n  cancelSignalTimeout (int)\nCancel command is sent out of band over its own connection, so cancel message can itself get stuck. This property controls “connect timeout” and “socket timeout” used for cancel commands. The timeout is specified in seconds. Default value is 10 seconds.\n  tcpKeepAlive (boolean)\nEnable or disable TCP keep-alive probe. The default is false .\n  tcpNoDelay (boolean)\nEnable or disable TCP nodelay. The default is true .\n  unknownLength (int)\nCertain postgresql types such as TEXT do not have a well defined length. When returning meta-data about these types through functions like ResultSetMetaData.getColumnDisplaySize and ResultSetMetaData.getPrecision we must provide a value and various client tools have different ideas about what they would like to see. This parameter specifies the length to return for types of unknown length.\n  stringtype (String)\nSpecify the type to use when binding PreparedStatement parameters set via setString() . If stringtype is set to VARCHAR (the default), such parameters will be sent to the server as varchar parameters. If stringtype is set to unspecified , parameters will be sent to the server as untyped values, and the server will attempt to infer an appropriate type. This is useful if you have an existing application that uses setString() to set parameters that are actually some other type, such as integers, and you are unable to change the application to use an appropriate method such as setInt() .\n  ApplicationName (String)\nSpecifies the name of the application that is using the connection. This allows a database administrator to see what applications are connected to the server and what resources they are using through views like pg_stat_activity.\n  kerberosServerName (String)\nThe Kerberos service name to use when authenticating with GSSAPI. This is equivalent to libpq’s PGKRBSRVNAME environment variable and defaults to “postgres”.\n  jaasApplicationName (String)\nSpecifies the name of the JAAS system or application login configuration.\n  jaasLogin (boolean)\nSpecifies whether to perform a JAAS login before authenticating with GSSAPI. If set to true (the default), the driver will attempt to obtain GSS credentials using the configured JAAS login module(s) (e.g. Krb5LoginModule ) before authenticating. To skip the JAAS login, for example if the native GSS implementation is being used to obtain credentials, set this to false .\n  gssEncMode (String)\nPostgreSQL 12 and later now allow GSSAPI encrypted connections. This parameter controls whether to enforce using GSSAPI encryption or not. The options are disable , allow , prefer and require\n disable is obvious and disables any attempt to connect using GSS encrypted mode allow will connect in plain text then if the server requests it will switch to encrypted mode prefer will attempt connect in encrypted mode and fall back to plain text if it fails to acquire an encrypted connection require attempts to connect in encrypted mode and will fail to connect if that is not possible. The default is allow .    gsslib (String)\nForce either SSPI (Windows transparent single-sign-on) or GSSAPI (Kerberos, via JSSE) to be used when the server requests Kerberos or SSPI authentication. Permissible values are auto (default, see below), sspi (force SSPI) or gssapi (force GSSAPI-JSSE). If this parameter is auto, SSPI is attempted if the server requests SSPI authentication, the JDBC client is running on Windows, and the Waffle libraries required for SSPI are on the CLASSPATH. Otherwise Kerberos/GSSAPI via JSSE is used.\n   Note\nThis behaviour does not exactly match that of libpq, which uses Windows' SSPI libraries for Kerberos (GSSAPI) requests by default when on Windows.\n gssapi mode forces JSSE’s GSSAPI to be used even if SSPI is available, matching the pre-9.4 behaviour.\nOn non-Windows platforms or where SSPI is unavailable, forcing sspi mode will fail with a PSQLException. To use SSPI with PgJDBC you must ensure thatthe waffle-jna library and its dependencies are present on the CLASSPATH . pgJDBC does not bundle waffle-jna in the pgJDBC jar.\nSince: 9.4\n  sspiServiceClass (String)\nSpecifies the name of the Windows SSPI service class that forms the service class part of the SPN. The default, POSTGRES, is almost always correct. See: SSPI authentication (Pg docs) Service Principal Names (MSDN), DsMakeSpn (MSDN) Configuring SSPI (Pg wiki). This parameter is ignored on non-Windows platforms.\n  useSpnego (boolean)\nUse SPNEGO in SSPI authentication requests\n  sendBufferSize (int)\nSets SO_SNDBUF on the connection stream\n  receiveBufferSize (int)\nSets SO_RCVBUF on the connection stream\n  readOnly (boolean)\nPut the connection in read-only mode\n  readOnlyMode (String)\nOne of ‘ignore’, ‘transaction’, or ‘always’. Controls the behavior when a connection is set to read only, When set to ‘ignore’ then the readOnly setting has no effect. When set to ‘transaction’ and readOnly is set to ‘true’ and autocommit is ‘false’ the driver will set the transaction to readonly by sending BEGIN READ ONLY . When set to ‘always’ and readOnly is set to ‘true’ the session will be set to READ ONLY if autoCommit is ‘true’. If autocommit is false the driver will set the transaction to read only by sending BEGIN READ ONLY . The default the value is ‘transaction’\n  disableColumnSanitiser (boolean)\nSetting this to true disables column name sanitiser. The sanitiser folds columns in the resultset to lowercase. The default is to sanitise the columns (off).\n  assumeMinServerVersion (String)\nAssume that the server is at least the given version, thus enabling to some optimization at connection time instead of trying to be version blind.\n  currentSchema (String)\nSpecify the schema (or several schema separated by commas) to be set in the search-path. This schema will be used to resolve unqualified object names used in statements over this connection.\n  targetServerType (String)\nAllows opening connections to only servers with required state, the allowed values are any, primary, master, slave, secondary, preferSlave, preferSecondary and preferPrimary. The primary/secondary distinction is currently done by observing if the server allows writes. The value preferSecondary tries to connect to secondary if any are available, otherwise allows falls back to connecting also to primary. The value preferPrimary tries to connect to primary if it is available, otherwise allows falls back to connecting to secondaries available.\n N. B. the words master and slave are being deprecated. We will silently accept them, but primary and secondary are encouraged.    hostRecheckSeconds (int)\nControls how long in seconds the knowledge about a host state is cached in JVM wide global cache. The default value is 10 seconds.\n  loadBalanceHosts (boolean)\nIn default mode (disabled) hosts are connected in the given order. If enabled hosts are chosen randomly from the set of suitable candidates.\n  socketFactory (String)\nThe provided value is a class name to use as the SocketFactory when establishing a socket connection. This may be used to create unix sockets instead of normal sockets. The class name specified by socketFactory must extend javax.net.SocketFactory and be available to the driver’s classloader. This class must have a zero-argument constructor, a single-argument constructor taking a String argument, or a single-argument constructor taking a Properties argument. The Properties object will contain all the connection parameters. The String argument will have the value of the socketFactoryArg connection parameter.\n  socketFactoryArg (String) : (deprecated)\nThis value is an optional argument to the constructor of the socket factory class provided above.\n  reWriteBatchedInserts (boolean)\nThis will change batch inserts from insert into foo (col1, col2, col3) values (1, 2, 3) into insert into foo (col1, col2, col3) values (1, 2, 3), (4, 5, 6) this provides 2-3x performance improvement\n  replication (String)\nConnection parameter passed in the startup message. This parameter accepts two values; “true” and database . Passing true tells the backend to go into walsender mode, wherein a small set of replication commands can be issued instead of SQL statements. Only the simple query protocol can be used in walsender mode. Passing “database” as the value instructs walsender to connect to the database specified in the dbname parameter, which will allow the connection to be used for logical replication from that database. Parameter should be use together with assumeMinServerVersion with parameter \u003e= 9.4 (backend \u003e= 9.4)\n  escapeSyntaxCallMode (String)\nSpecifies how the driver transforms JDBC escape call syntax into underlying SQL, for invoking procedures or functions. In escapeSyntaxCallMode=select mode (the default), the driver always uses a SELECT statement (allowing function invocation only). In escapeSyntaxCallMode=callIfNoReturn mode, the driver uses a CALL statement (allowing procedure invocation) if there is no return parameter specified, otherwise the driver uses a SELECT statement. In escapeSyntaxCallMode=call mode, the driver always uses a CALL statement (allowing procedure invocation only). The default is select\n  maxResultBuffer (String)\nSpecifies size of result buffer in bytes, which can’t be exceeded during reading result set. Property can be specified in two styles:\n as size of bytes (i.e. 100, 150M, 300K, 400G, 1T); as percent of max heap memory (i.e. 10p, 15pct, 20percent); A limit during setting of property is 90% of max heap memory. All given values, which gonna be higher than limit, gonna lowered to the limit. By default, maxResultBuffer is not set (is null), what means that reading of results gonna be performed without limits.    adaptiveFetch (boolean)\nSpecifies if number of rows, fetched in ResultSet by one fetch with trip to the database, should be dynamic. Using dynamic number of rows, computed by adaptive fetch, allows to use most of the buffer declared in maxResultBuffer property. Number of rows would be calculated by dividing maxResultBuffer size into max row size observed so far, rounded down. First fetch will have number of rows declared in defaultRowFetchSize . Number of rows can be limited by adaptiveFetchMinimum and adaptiveFetchMaximum . Requires declaring of maxResultBuffer and defaultRowFetchSize to work. By default, adaptiveFetch is false.\n  adaptiveFetchMinimum (int)\nSpecifies the lowest number of rows which can be calculated by adaptiveFetch. Requires adaptiveFetch set to true to work. By default, minimum of rows calculated by adaptiveFetch is 0.\n  adaptiveFetchMaximum (int)\nSpecifies the highest number of rows which can be calculated by adaptiveFetch. Requires adaptiveFetch set to true to work. By default, maximum of rows calculated by adaptiveFetch is -1, which is understood as infinite.\n  logServerErrorDetail (boolean)\nWhether to include server error details in exceptions and log messages (for example inlined query parameters). Setting to false will only include minimal, not sensitive messages. By default this is set to true, server error details are propagated. This may include sensitive details such as query parameters.\n  quoteReturningIdentifiers (boolean)\nQuote returning columns. There are some ORM’s that quote everything, including returning columns If we quote them, then we end up sending ““colname”” to the backend instead of “colname” which will not be found.\n  authenticationPluginClassName (String)\nFully qualified class name of the class implementing the AuthenticationPlugin interface. If this is null, the password value in the connection properties will be used.\n  Unix sockets    By adding junixsocket you can obtain a socket factory that works with the driver. Code can be found at here and instructions at here\nDependencies for junixsocket are :\n\u003cdependency\u003e \u003cgroupId\u003ecom.kohlschutter.junixsocket\u003c/groupId\u003e \u003cartifactId\u003ejunixsocket-core\u003c/artifactId\u003e \u003cversion\u003e2.3.3\u003c/version\u003e \u003c/dependency\u003e Simply add ?socketFactory=org.newsclub.net.unix.AFUNIXSocketFactory$FactoryArg\u0026socketFactoryArg=[path-to-the-unix-socket] to the connection URL.\nFor many distros the default path is /var/run/postgresql/.s. PGSQL.5432\nConnection Fail-over    To support simple connection fail-over it is possible to define multiple endpoints (host and port pairs) in the connection url separated by commas. The driver will try once to connect to each of them in order until the connection succeeds. If none succeeds a normal connection exception is thrown.\nThe syntax for the connection url is: jdbc:postgresql://host1:port1,host2:port2/database\nThe simple connection fail-over is useful when running against a high availability postgres installation that has identical data on each node. For example streaming replication postgres or postgres-xc cluster.\nFor example an application can create two connection pools. One data source is for writes, another for reads. The write pool limits connections only to a primary node:jdbc:postgresql://node1,node2,node3/accounting?targetServerType=primary .\nAnd read pool balances connections between secondary nodes, but allows connections also to a primary if no secondaries are available: jdbc:postgresql://node1,node2,node3/accounting?targetServerType=preferSecondary\u0026loadBalanceHosts=true\nIf a secondary fails, all secondaries in the list will be tried first. In the case that there are no available secondaries the primary will be tried. If all the servers are marked as “can’t connect” in the cache then an attempt will be made to connect to all the hosts in the URL, in order.\n","description":"","title":"Initializing the Driver","uri":"/pgjdbc/documentation/use/"},{"categories":null,"content":"Configuring the PostgreSQL™ server for SSL is covered in the main documentation, so it will not be repeated here. There are also instructions in the source certdir Before trying to access your SSL enabled server from Java, make sure you can get to it via psql. You should see output like the following if you have established a SSL connection.\n$ ./bin/psql -h localhost -U postgres psql (9.6.2) SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off) Type \"help\" for help. postgres=# Custom SSLSocketFactory    PostgreSQL™ provides a way for developers to customize how a SSL connection is established. This may be used to provide a custom certificate source or other extensions by allowing the developer to create their own SSLContext instance. The connection URL parameters sslfactory allow the user to specify which custom class to use for creating the SSLSocketFactory . The class name specified by sslfactory must extend javax.net.ssl.SSLSocketFactory and be available to the driver’s classloader.\nThis class must have a zero argument constructor or a single argument constructor preferentially taking a Properties argument. There is a simple org.postgresql.ssl.DefaultJavaSSLFactory provided which uses the default java SSLFactory.\nInformation on how to actually implement such a class is beyond the scope of this documentation. Places to look for help are the JSSE Reference Guide and the source to the NonValidatingFactory provided by the JDBC driver.\nConfiguring the Client    There are a number of connection parameters for configuring the client for SSL. See SSL Connection parameters\nThe simplest being ssl=true , passing this into the driver will cause the driver to validate both the SSL certificate and verify the hostname (same as verify-full ).\n Note\nThis is different than libpq which defaults to a non-validating SSL connection.\n In this mode, when establishing a SSL connection the JDBC driver will validate the server’s identity preventing “man in the middle” attacks. It does this by checking that the server certificate is signed by a trusted authority, and that the host you are connecting to is the same as the hostname in the certificate.\nIf you require encryption and want the connection to fail if it can’t be encrypted then set sslmode=require this ensures that the server is configured to accept SSL connections for this Host/IP address and that the server recognizes the client certificate. In other words if the server does not accept SSL connections or the client certificate is not recognized the connection will fail.\n Note\nIn this mode we will accept all server certificates.\n If sslmode=verify-ca , the server is verified by checking the certificate chain up to the root certificate stored on the client.\nIf sslmode=verify-full , the server host name will be verified to make sure it matches the name stored in the server certificate.\nThe SSL connection will fail if the server certificate cannot be verified. verify-full is recommended in most security-sensitive environments.\nThe default SSL Socket factory is the LibPQFactory. In the case where the certificate validation is failing you can try sslcert= and LibPQFactory will not send the client certificate. If the server is not configured to authenticate using the certificate it should connect.\nThe location of the client certificate, the PKCS-8 client key and root certificate can be overridden with the sslcert , sslkey , and sslrootcert settings respectively. These default to /defaultdir/postgresql.crt, /defaultdir/postgresql.pk8 , and /defaultdir/root.crt respectively where defaultdir is ${user.home}/.postgresql/ in *nix systems and %appdata%/postgresql/ on windows\nAs of version 42.2.9 PKCS-12 is also supported. In this archive format the client key and the client certificate are in one file, which needs to be set with the sslkey parameter. For the PKCS-12 format to be recognized, the file extension must be “.p12” (supported since 42.2.9) or “.pfx” (since 42.2.16). (In this case the sslcert parameter is ignored.)\nFiner control of the SSL connection can be achieved using the sslmode connection parameter. This parameter is the same as the libpq sslmode parameter and currently implements the following\n   sslmode Eavesdropping Protection MITM Protection      disable No No I don’t care about security and don’t want to pay the overhead for encryption   allow Maybe No I don’t care about security but will pay the overhead for encryption if the server insists on it   prefer Maybe No I don’t care about encryption but will pay the overhead of encryption if the server supports it   require Yes No I want my data to be encrypted, and I accept the overhead. I trust that the network will make sure I always connect to the server I want.   verify-ca Yes Depends on CA policy I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server that I trust.   verify-full Yes Yes I want my data encrypted, and I accept the overhead. I want to be sure that I connect to a server I trust, and that it’s the one I specify.     NOTE\nIf you are using Java’s default mechanism (not LibPQFactory) to create the SSL connection you will need to make the server certificate available to Java, the first step is to convert it to a form Java understands.\n openssl x509 -in server.crt -out server.crt.der -outform der\nFrom here the easiest thing to do is import this certificate into Java’s system truststore.\nkeytool -keystore $JAVA_HOME/lib/security/cacerts -alias postgresql -import -file server.crt.der\nThe default password for the cacerts keystore is changeit . Setting the alias to postgresql is not required. You may apply any name you wish.\nIf you do not have access to the system cacerts truststore you can create your own truststore.\nkeytool -keystore mystore -alias postgresql -import -file server.crt.der\nWhen starting your Java application you must specify this keystore and password to use.\njava -Djavax.net.ssl.trustStore=mystore -Djavax.net.ssl.trustStorePassword=mypassword com.mycompany.MyApp\nIn the event of problems extra debugging information is available by adding -Djavax.net.debug=ssl to your command line.\nUsing SSL without Certificate Validation    In some situations it may not be possible to configure your Java environment to make the server certificate available, for example in an applet. For a large scale deployment it would be best to get a certificate signed by recognized certificate authority, but that is not always an option. The JDBC driver provides an option to establish a SSL connection without doing any validation, but please understand the risk involved before enabling this option.\nA non-validating connection is established via a custom SSLSocketFactory class that is provided with the driver. Setting the connection URL parameter sslfactory=org.postgresql.ssl.NonValidatingFactory will turn off all SSL validation.\n","description":"","title":"Using SSL","uri":"/pgjdbc/documentation/ssl/"},{"categories":null,"content":"Any time you want to issue SQL statements to the database, you require a Statement or PreparedStatement instance. Once you have a Statement or PreparedStatement , you can use issue a query. This will return a ResultSet instance, which contains the entire result (see the section called Getting results based on a cursor here for how to alter this behaviour). Example 5.1, “Processing a Simple Query in JDBC” illustrates this process.\nExample 5.1. Processing a Simple Query in JDBC    This example will issue a simple query and print out the first column of each row using a Statement .\nStatement st = conn.createStatement(); ResultSet rs = st.executeQuery(\"SELECT * FROM mytable WHERE columnfoo = 500\"); while (rs.next()) { System.out.print(\"Column 1 returned \"); System.out.println(rs.getString(1)); } rs.close(); st.close(); This example issues the same query as before but uses a PreparedStatement and a bind value in the query.\nint foovalue = 500; PreparedStatement st = conn.prepareStatement(\"SELECT * FROM mytable WHERE columnfoo = ?\"); st.setInt(1, foovalue); ResultSet rs = st.executeQuery(); while (rs.next()) { System.out.print(\"Column 1 returned \"); System.out.println(rs.getString(1)); } rs.close(); st.close(); Getting results based on a cursor    By default the driver collects all the results for the query at once. This can be inconvenient for large data sets so the JDBC driver provides a means of basing a ResultSet on a database cursor and only fetching a small number of rows.\nA small number of rows are cached on the client side of the connection and when exhausted the next block of rows is retrieved by repositioning the cursor.\n NOTE\nCursor based ResultSets cannot be used in all situations. There a number of restrictions which will make the driver silently fall back to fetching the whole ResultSet at once.\n  The connection to the server must be using the V3 protocol. This is the default for (and is only supported by) server versions 7.4 and later.\n  The Connection must not be in autocommit mode. The backend closes cursors at the end of transactions, so in autocommit mode the backend will have closed the cursor before anything can be fetched from it.\n  The Statement must be created with a ResultSet type of ResultSet.TYPE_FORWARD_ONLY. This is the default, so no code will need to be rewritten to take advantage of this, but it also means that you cannot scroll backwards or otherwise jump around in the ResultSet.\n  The query given must be a single statement, not multiple statements strung together with semicolons.\n   Example 5.2. Setting fetch size to turn cursors on and off.    Changing code to cursor mode is as simple as setting the fetch size of the Statement to the appropriate size. Setting the fetch size back to 0 will cause all rows to be cached (the default behaviour).\n// make sure autocommit is off conn.setAutoCommit(false); Statement st = conn.createStatement(); // Turn use of the cursor on. st.setFetchSize(50); ResultSet rs = st.executeQuery(\"SELECT * FROM mytable\"); while (rs.next()) { System.out.print(\"a row was returned.\"); } rs.close(); // Turn the cursor off. st.setFetchSize(0); rs = st.executeQuery(\"SELECT * FROM mytable\"); while (rs.next()) { System.out.print(\"many rows were returned.\"); } rs.close(); // Close the statement. st.close(); Using the Statement or PreparedStatement Interface    The following must be considered when using the Statement or PreparedStatement interface:\n  You can use a single Statement instance as many times as you want. You could create one as soon as you open the connection and use it for the connection’s lifetime. But you have to remember that only one ResultSet can exist per Statement or PreparedStatement at a given time.\n  If you need to perform a query while processing a ResultSet, you can simply create and use another Statement .\n  If you are using threads, and several are using the database, you must use a separate Statement for each thread. Refer to Using the Driver in a Multithreaded or a Servlet Environment if you are thinking of using threads, as it covers some important points.\n  When you are done using the Statement or PreparedStatement you should close it.\n  In JDBC, the question mark (?) is the placeholder for the positional parameters of a PreparedStatement. There are, however, a number of PostgreSQL operators that contain a question mark. To keep such question marks in a SQL statement from being interpreted as positional parameters, use two question marks ( ?? ) as escape sequence. You can also use this escape sequence in a Statement , but that is not required. Specifically only in a Statement a single ( ? ) can be used as an operator.\n  Using the ResultSet Interface    The following must be considered when using the ResultSet interface:\n  Before reading any values, you must call next(). This returns true if there is a result, but more importantly, it prepares the row for processing.\n  You must close a ResultSet by calling close() once you have finished using it.\n  Once you make another query with the Statement used to create a ResultSet, the currently open ResultSet instance is closed automatically.\n  When PreparedStatement API is used, ResultSet switches to binary mode after five query executions (this default is set by the prepareThreshold connection property, see Server Prepared Statements. This may cause unexpected behavior when some methods are called. For example, results on method calls such as getString() on non-string data types, while logically equivalent, may be formatted differently after execution exceeds the set prepareThreshold when conversion to object method switches to one matching the return mode.\n  Performing Updates    To change data (perform an INSERT , UPDATE , or DELETE ) you use the executeUpdate() method. This method is similar to the method executeQuery()\nused to issue a SELECT statement, but it doesn’t return a ResultSet instead it returns the number of rows affected by the INSERT , UPDATE , or DELETE statement. Example 5.3, “Deleting Rows in JDBC” illustrates the usage.\nExample 5.3. Deleting Rows in JDBC    This example will issue a simple DELETE statement and print out the number of rows deleted.\nint foovalue = 500; PreparedStatement st = conn.prepareStatement(\"DELETE FROM mytable WHERE columnfoo = ?\"); st.setInt(1, foovalue); int rowsDeleted = st.executeUpdate(); System.out.println(rowsDeleted + \" rows deleted\"); st.close(); Creating and Modifying Database Objects    To create, modify or drop a database object like a table or view you use the execute() method. This method is similar to the method executeQuery() , but it doesn’t return a result.Example 5.4, “Dropping a Table in JDBC illustrates the usage.\nExample 5.4. Dropping a Table in JDBC    This example will drop a table.\nStatement st = conn.createStatement(); st.execute(\"DROP TABLE mytable\"); st.close(); Using Java 8 Date and Time classes    The PostgreSQL™ JDBC driver implements native support for the Java 8 Date and Time API(JSR-310) using JDBC 4.2.\nTable 5.1. Supported Java 8 Date and Time classes       PostgreSQL™ Java SE 8     DATE LocalDate   TIME [ WITHOUT TIME ZONE ] LocalTime   TIMESTAMP [ WITHOUT TIME ZONE ] LocalDateTime   TIMESTAMP WITH TIME ZONE OffsetDateTime    This is closely aligned with tables B-4 and B-5 of the JDBC 4.2 specification.\n Note\nZonedDateTime , Instant and OffsetTime / TIME WITH TIME ZONE are not supported. Also note that all OffsetDateTime instances will have be in UTC (have offset 0). This is because the backend stores them as UTC.\n Example 5.2. Reading Java 8 Date and Time values using JDBC\nStatement st = conn.createStatement(); ResultSet rs = st.executeQuery(\"SELECT * FROM mytable WHERE columnfoo = 500\"); while (rs.next()) { System.out.print(\"Column 1 returned \"); LocalDate localDate = rs.getObject(1, LocalDate.class); System.out.println(localDate); } rs.close(); st.close(); For other data types simply pass other classes to #getObject .\n Note\nThe Java data types needs to match the SQL data types in table 7.1.\n Example 5.3. Writing Java 8 Date and Time values using JDBC    LocalDate localDate = LocalDate.now(); PreparedStatement st = conn.prepareStatement(\"INSERT INTO mytable (columnfoo) VALUES (?)\"); st.setObject(1, localDate); st.executeUpdate(); st.close(); ","description":"","title":"Issuing a Query and Processing the Result","uri":"/pgjdbc/documentation/query/"},{"categories":null,"content":"PostgreSQL™ supports two types of stored objects, functions that can return a result value and - starting from v11 - procedures that can perform transaction control. Both types of stored objects are invoked using CallableStatement and the standard JDBC escape call syntax {call storedobject(?)} . The escapeSyntaxCallMode connection property controls how the driver transforms the call syntax to invoke functions or procedures.\nThe default mode, select , supports backwards compatibility for existing applications and supports function invocation only. This is required to invoke a void returning function.\nFor new applications, use escapeSyntaxCallMode=callIfNoReturn to map CallableStatements with return values to stored functions and CallableStatements without return values to stored procedures.\nExample 6.1. Calling a built in stored function    This example shows how to call a PostgreSQL™ built in function, upper, which simply converts the supplied string argument to uppercase.\nCallableStatement upperFunc = conn.prepareCall(\"{? = call upper( ? ) }\"); upperFunc.registerOutParameter(1, Types.VARCHAR); upperFunc.setString(2, \"lowercase to uppercase\"); upperFunc.execute(); String upperCased = upperFunc.getString(1); upperFunc.close(); Obtaining a ResultSet from a stored function    PostgreSQL’s™ stored functions can return results in two different ways. The function may return either a refcursor value or a SETOF some datatype. Depending on which of these return methods are used determines how the function should be called.\nFrom a Function Returning SETOF type    Functions that return data as a set should not be called via the CallableStatement interface, but instead should use the normal Statement or PreparedStatement interfaces.\nExample 6.2. Getting SETOF type values from a function    Statement stmt = conn.createStatement(); stmt.execute(\"CREATE OR REPLACE FUNCTION setoffunc() RETURNS SETOF int AS \" + \"' SELECT 1 UNION SELECT 2;' LANGUAGE sql\"); ResultSet rs = stmt.executeQuery(\"SELECT * FROM setoffunc()\"); while (rs.next()) { // do something } rs.close(); stmt.close(); From a Function Returning a refcursor    When calling a function that returns a refcursor you must cast the return type of getObject to a ResultSet`\n NOTE\nOne notable limitation of the current support for a ResultSet created from a refcursor is that even though it is a cursor backed ResultSet , all data will be retrieved and cached on the client. The Statement fetch size parameter described in the section called Getting results based on a cursor is ignored. This limitation is a deficiency of the JDBC driver, not the server, and it is technically possible to remove it, we just haven’t found the time.\n Example 6.3. Getting refcursor Value From a Function    // Setup function to call. Statement stmt = conn.createStatement(); stmt.execute(\"CREATE OR REPLACE FUNCTION refcursorfunc() RETURNS refcursor AS '\" + \" DECLARE \" + \" mycurs refcursor; \" + \" BEGIN \" + \" OPEN mycurs FOR SELECT 1 UNION SELECT 2; \" + \" RETURN mycurs; \" + \" END;' language plpgsql\"); stmt.close(); // We must be inside a transaction for cursors to work. conn.setAutoCommit(false); // Function call. CallableStatement func = conn.prepareCall(\"{? = call refcursorfunc() }\"); func.registerOutParameter(1, Types.OTHER); func.execute(); ResultSet results = (ResultSet) func.getObject(1); while (results.next()) { // do something with the results. } results.close(); func.close(); It is also possible to treat the refcursor return value as a cursor name directly. To do this, use the getString of ResultSet . With the underlying cursor name, you are free to directly use cursor commands on it, such as FETCH and MOVE .\nExample 6.4. Treating refcursor as a cursor name    conn.setAutoCommit(false); CallableStatement func = conn.prepareCall(\"{? = call refcursorfunc() }\"); func.registerOutParameter(1, Types.OTHER); func.execute(); String cursorName = func.getString(1); func.close(); Example 6.5. Calling a stored procedure    This example shows how to call a PostgreSQL™ procedure that uses transaction control.\n// set up a connection String url = \"jdbc:postgresql://localhost/test\"; Properties props = new Properties(); ...other properties... // Ensure EscapeSyntaxCallmode property set to support procedures if no return value  props.setProperty(\"escapeSyntaxCallMode\", \"callIfNoReturn\"); Connection con = DriverManager.getConnection(url, props); // Setup procedure to call. Statement stmt = con.createStatement(); stmt.execute(\"CREATE TEMP TABLE temp_val ( some_val bigint )\"); stmt.execute(\"CREATE OR REPLACE PROCEDURE commitproc(a INOUT bigint) AS '\" + \" BEGIN \" + \" INSERT INTO temp_val values(a); \" + \" COMMIT; \" + \" END;' LANGUAGE plpgsql\"); stmt.close(); // As of v11, we must be outside a transaction for procedures with transactions to work. con.setAutoCommit(true); // Procedure call with transaction CallableStatement proc = con.prepareCall(\"{call commitproc( ? )}\"); proc.setInt(1, 100); proc.execute(); proc.close(); ","description":"","title":"Calling Stored Functions and Procedures","uri":"/pgjdbc/documentation/callproc/"},{"categories":null,"content":"PostgreSQL™ provides two distinct ways to store binary data. Binary data can be stored in a table using the data type BYTEA or by using the Large Object feature which stores the binary data in a separate table in a special format and refers to that table by storing a value of type OID in your table.\nIn order to determine which method is appropriate you need to understand the limitations of each method. The BYTEA data type is not well suited for storing very large amounts of binary data. While a column of type BYTEA can hold up to 1 GB of binary data, it would require a huge amount of memory to process such a large value. The Large Object method for storing binary data is better suited to storing very large values, but it has its own limitations. Specifically deleting a row that contains a Large Object reference does not delete the Large Object. Deleting the Large Object is a separate operation that needs to be performed. Large Objects also have some security issues since anyone connected to the database can view and/or modify any Large Object, even if they don’t have permissions to view/update the row containing the Large Object reference.\nVersion 7.2 was the first release of the JDBC driver that supports the BYTEA data type. The introduction of this functionality in 7.2 has introduced a change in behavior as compared to previous releases. Since 7.2, the methods getBytes() , setBytes() , getBinaryStream() , and setBinaryStream() operate on the BYTEA data type. In 7.1 and earlier, these methods operated on the OID data type associated with Large Objects. It is possible to revert the driver back to the old 7.1 behavior by setting the property compatible on the Connection object to the value 7.1 . More details on connection properties are available in the section called Connection Parameters.\nTo use the BYTEA data type you should simply use the getBytes() , setBytes() , getBinaryStream() , or setBinaryStream() methods.\nTo use the Large Object functionality you can use either the LargeObject class provided by the PostgreSQL™ JDBC driver, or by using the getBLOB() and setBLOB() methods.\n IMPORTANT\nYou must access Large Objects within an SQL transaction block. You can start a transaction block by calling setAutoCommit(false) .\n Example 7.1, “Processing Binary Data in JDBC” contains some examples on how to process binary data using the PostgreSQL™ JDBC driver.\nExample 7.1. Processing Binary Data in JDBC    For example, suppose you have a table containing the file names of images and you also want to store the image in a BYTEA column:\nCREATE TABLE images (imgname text, img bytea); To insert an image, you would use:\nFile file = new File(\"myimage.gif\"); FileInputStream fis = new FileInputStream(file); PreparedStatement ps = conn.prepareStatement(\"INSERT INTO images VALUES (?, ?)\"); ps.setString(1, file.getName()); ps.setBinaryStream(2, fis, (int) file.length()); ps.executeUpdate(); ps.close(); fis.close(); Here, setBinaryStream() transfers a set number of bytes from a stream into the column of type BYTEA. This also could have been done using the setBytes() method if the contents of the image was already in a byte[] .\n NOTE\nThe length parameter to setBinaryStream must be correct. There is no way to indicate that the stream is of unknown length. If you are in this situation, you must read the stream yourself into temporary storage and determine the length. Now with the correct length you may send the data from temporary storage on to the driver.\n Retrieving an image is even easier. (We use PreparedStatement here, but the Statement class can equally be used.\nPreparedStatement ps = conn.prepareStatement(\"SELECT img FROM images WHERE imgname = ?\"); ps.setString(1, \"myimage.gif\"); ResultSet rs = ps.executeQuery(); while (rs.next()) { byte[] imgBytes = rs.getBytes(1); // use the data in some way here } rs.close(); ps.close(); Here the binary data was retrieved as an byte[] . You could have used a InputStream object instead.\nAlternatively you could be storing a very large file and want to use the LargeObject API to store the file:\nCREATE TABLE imageslo (imgname text, imgoid oid); To insert an image, you would use:\n// All LargeObject API calls must be within a transaction block conn.setAutoCommit(false); // Get the Large Object Manager to perform operations with LargeObjectManager lobj = conn.unwrap(org.postgresql.PGConnection.class).getLargeObjectAPI(); // Create a new large object long oid = lobj.createLO(LargeObjectManager.READ | LargeObjectManager.WRITE); // Open the large object for writing LargeObject obj = lobj.open(oid, LargeObjectManager.WRITE); // Now open the file File file = new File(\"myimage.gif\"); FileInputStream fis = new FileInputStream(file); // Copy the data from the file to the large object byte buf[] = new byte[2048]; int s, tl = 0; while ((s = fis.read(buf, 0, 2048)) \u003e 0) { obj.write(buf, 0, s); tl += s; } // Close the large object obj.close(); // Now insert the row into imageslo PreparedStatement ps = conn.prepareStatement(\"INSERT INTO imageslo VALUES (?, ?)\"); ps.setString(1, file.getName()); ps.setLong(2, oid); ps.executeUpdate(); ps.close(); fis.close(); // Finally, commit the transaction. conn.commit(); Retrieving the image from the Large Object:\n// All LargeObject API calls must be within a transaction block conn.setAutoCommit(false); // Get the Large Object Manager to perform operations with LargeObjectManager lobj = conn.unwrap(org.postgresql.PGConnection.class).getLargeObjectAPI(); PreparedStatement ps = conn.prepareStatement(\"SELECT imgoid FROM imageslo WHERE imgname = ?\"); ps.setString(1, \"myimage.gif\"); ResultSet rs = ps.executeQuery(); while (rs.next()) { // Open the large object for reading  long oid = rs.getLong(1); LargeObject obj = lobj.open(oid, LargeObjectManager.READ); // Read the data  byte buf[] = new byte[obj.size()]; obj.read(buf, 0, obj.size()); // Do something with the data read here  // Close the object  obj.close(); } rs.close(); ps.close(); // Finally, commit the transaction. conn.commit(); ","description":"","title":"Storing Binary Data","uri":"/pgjdbc/documentation/binary-data/"},{"categories":null,"content":"The JDBC specification (like the ODBC specification) acknowledges the fact that some vendor specific SQL may be required for certain RDBMS features. To aid developers in writing portable JDBC applications across multiple database products, a special escape syntax is used to specify the generic commands the developer wants to be run. The JDBC driver translates these escape sequences into native syntax for its specific database. For more information consult the Java DB Technical Documentation.\nThe parsing of the sql statements for these escapes can be disabled using Statement.setEscapeProcessing(false) .\nConnection.nativeSQL(String sql) provides another way to have escapes processed. It translates the given SQL to a SQL suitable for the PostgreSQL™ backend.\nExample 8.1. Using JDBC escapes    To use the JDBC escapes, you simply write your SQL replacing date/time literal values, outer join and functions by the JDBC escape syntax. For example :\nResultSet rs = st.executeQuery(\"SELECT {fn week({d '2005-01-24'})}\"); is the portable version for\nResultSet rs = st.executeQuery(\"SELECT extract(week from DATE '2005-01-24')\"); Escape for like escape character    You can specify which escape character to use in strings comparison (with LIKE ) to protect wildcards characters ('%' and ‘_') by adding the following escape : {escape 'escape-character'} . The driver supports this only at the end of the comparison expression.\nFor example, you can compare string values using ‘|’ as escape character to protect ‘_’ :\nrs = stmt.executeQuery(\"select str2 from comparisontest where str1 like '|_abcd' {escape '|'} \"); Escape for outer joins    You can specify outer joins using the following syntax: {oj table (LEFT|RIGHT|FULL) OUTER JOIN (table | outer-join) ON search-condition}\nFor example :\nResultSet rs = stmt.executeQuery(\"select * from {oj a left outer join b on (a.i=b.i)} \"); Date-time escapes    The JDBC specification defines escapes for specifying date, time and timestamp values which are supported by the driver.\n date : {d 'yyyy-mm-dd'} which is translated to DATE 'yyyy-mm-dd' time : {t 'hh:mm:ss'} which is translated to TIME 'hh:mm:ss' timestamp : {ts 'yyyy-mm-dd hh:mm:ss.f...'} which is translated to TIMESTAMP 'yyyy-mm-dd hh:mm:ss.f' The fractional seconds (.f…) portion of the TIMESTAMP can be omitted.  Escaped scalar functions    The JDBC specification defines functions with an escape call syntax : {fn function_name(arguments)} . The following tables show which functions are supported by the PostgreSQL™ driver. The driver supports the nesting and the mixing of escaped functions and escaped values. The appendix C of the JDBC specification describes the functions.\nSome functions in the following tables are translated but reported as not supported because they are duplicating or changing their order of the arguments. While this is harmless for literal values or columns, it will cause problems when using prepared statements. For example \" {fn right(?,?)} \" will be translated to \" substring(? from (length(?)+1-?)) “. As you can see the translated SQL requires more parameters than before the translation but the driver will not automatically handle this.\nTable 8.1. Supported escaped numeric functions       function reported as supported translation comments     abs(arg1) yes abs(arg1)    acos(arg1) yes acos(arg1)    asin(arg1) yes asin(arg1)    atan(arg1) yes atan(arg1)    atan2(arg1, arg2) yes atan2(arg1, arg2)    ceiling(arg1) yes ceil(arg1)    cos(arg1) yes cos(arg1)    cot(arg1) yes cot(arg1)    degrees(arg1) yes degrees(arg1)    exp(arg1) yes exp(arg1)    floor(arg1) yes floor(arg1)    log(arg1) yes ln(arg1)    log10(arg1) yes log(arg1)    mod(arg1, arg2) yes mod(arg1, arg2)    pi(arg1) yes pi(arg1)    power(arg1, arg2) yes pow(arg1, arg2)    radians(arg1) yes radians(arg1)    rand() yes random()    rand(arg1) yes setseed(arg1)*0+random() The seed is initialized with the given argument and a new random value is returned.   round(arg1, arg2) yes round(arg1, arg2)    sign(arg1) yes sign(arg1)    sin(arg1) yes sin(arg1)    sqrt(arg1) yes sqrt(arg1)    tan(arg1) yes tan(arg1)    truncate(arg1, arg2) yes trunc(arg1, arg2)     Table 8.2. Supported escaped string functions       function reported as supported translation comments     ascii(arg1) yes ascii(arg1)    char(arg1) yes chr(arg1)    concat(arg1, arg2…) yes (arg1    only require the two arguments version, but supporting more arguments      was so easy…      insert(arg1, arg2, arg3, arg4) no overlay(arg1 placing arg4 from arg2 for arg3) This function is not supported since it changes the order of the arguments which can be a problem (for prepared   statements by example).      lcase(arg1) yes lower(arg1)    left(arg1, arg2) yes substring(arg1 for arg2)    length(arg1) yes length(trim(trailing from arg1))    locate(arg1, arg2) no position(arg1 in arg2)    locate(arg1, arg2, arg3) no (arg2*sign(position(arg1 in substring(arg2 from arg3)+position(arg1 in substring(arg2 from arg3)) Not supported since the three arguments version duplicate and change the order of the arguments.   ltrim(arg1) yes trim(leading from arg1)    repeat(arg1, arg2) yes repeat(arg1, arg2)    replace(arg1, arg2, arg3) yes replace(arg1, arg2, arg3) Only reported as supported by 7.3 and above servers.   right(arg1, arg2) no substring(arg1 from (length(arg1)+1-arg2)) Not supported since arg2 is duplicated.   rtrim(arg1) yes trim(trailing from arg1)    space(arg1) yes repeat(’ ‘, arg1)    substring(arg1, arg2) yes substr(arg1, arg2)    substring(arg1, arg2, arg3) yes substr(arg1, arg2, arg3)    ucase(arg1) yes upper(arg1)    soundex(arg1) no soundex(arg1) Not supported since it requires the fuzzystrmatch contrib module.   difference(arg1, arg2) no difference(arg1, arg2) Not supported since it requires the fuzzystrmatch contrib module.    Table 8.3. Supported escaped date/time functions       function reported as supported translation comments     curdate() yes current_date    curtime() yes current_time    dayname(arg1) yes to_char(arg1, ‘Day’)    dayofmonth(arg1) yes extract(day from arg1)    dayofweek(arg1) yes extract(dow from arg1)+1 We must add 1 to be in the expected 1-7 range.   dayofyear(arg1) yes extract(doy from arg1)    hour(arg1) yes extract(hour from arg1)    minute(arg1) yes extract(minute from arg1)    month(arg1) yes extract(month from arg1)    monthname(arg1) yes to_char(arg1, ‘Month’)    now() yes now()    quarter(arg1) yes extract(quarter from arg1)    second(arg1) yes extract(second from arg1)    week(arg1) yes extract(week from arg1)    year(arg1) yes extract(year from arg1)    timestampadd(argIntervalType, argCount, argTimeStamp) yes ('(interval according to argIntervalType and    argCount)'+argTimeStamp) an argIntervalType value of SQL_TSI_FRAC_SECOND     is not implemented since backend does not support it      timestampdiff(argIntervalType, argTimeStamp1, argTimeStamp2) not extract((interval according to argIntervalType) from argTimeStamp2-argTimeStamp1 ) only an argIntervalType value of SQL_TSI_FRAC_SECOND, SQL_TSI_FRAC_MINUTE, SQL_TSI_FRAC_HOUR or SQL_TSI_FRAC_DAY is supported    Table 8.4. Supported escaped misc functions       function reported as supported translation comments     database() yes current_database() Only reported as supported by 7.3 and above servers.   ifnull(arg1, arg2) yes coalesce(arg1, arg2)    user() yes user     ","description":"","title":"JDBC escapes","uri":"/pgjdbc/documentation/escapes/"},{"categories":null,"content":"PostgreSQL™ is an extensible database system. You can add your own functions to the server, which can then be called from queries, or even add your own data types. As these are facilities unique to PostgreSQL™, we support them from Java, with a set of extension APIs. Some features within the core of the standard driver actually use these extensions to implement Large Objects, etc.\nAccessing the Extensions    To access some of the extensions, you need to use some extra methods in the org.postgresql.PGConnection class. In this case, you would need to cast the return value of Driver.getConnection() . For example:\nConnection db = Driver.getConnection(url, username, password); // ... // later on Fastpath fp = db.unwrap(org.postgresql.PGConnection.class).getFastpathAPI(); Geometric Data Types    PostgreSQL™ has a set of data types that can store geometric features into a table. These include single points, lines, and polygons. We support these types in Java with the org.postgresql.geometric package. Please consult the Javadoc mentioned in Further Reading for details of available classes and features.\nExample 9.1. Using the CIRCLE datatype JDBC    import java.sql.*; import org.postgresql.geometric.PGpoint; import org.postgresql.geometric.PGcircle; public class GeometricTest { public static void main(String args[]) throws Exception { String url = \"jdbc:postgresql://localhost:5432/test\"; try (Connection conn = DriverManager.getConnection(url, \"test\", \"\")) { try (Statement stmt = conn.createStatement()) { stmt.execute(\"CREATE TEMP TABLE geomtest(mycirc circle)\"); } insertCircle(conn); retrieveCircle(conn); } } private static void insertCircle(Connection conn) throws SQLException { PGpoint center = new PGpoint(1, 2.5); double radius = 4; PGcircle circle = new PGcircle(center, radius); try (PreparedStatement ps = conn.prepareStatement(\"INSERT INTO geomtest(mycirc) VALUES (?)\")) { ps.setObject(1, circle); ps.executeUpdate(); } } private static void retrieveCircle(Connection conn) throws SQLException { try (Statement stmt = conn.createStatement()) { try (ResultSet rs = stmt.executeQuery(\"SELECT mycirc, area(mycirc) FROM geomtest\")) { while (rs.next()) { PGcircle circle = (PGcircle) rs.getObject(1); double area = rs.getDouble(2); System.out.println(\"Center (X, Y) = (\" + circle.center.x + \", \" + circle.center.y + \")\"); System.out.println(\"Radius = \" + circle.radius); System.out.println(\"Area = \" + area); } } } } } Large Objects    Large objects are supported in the standard JDBC specification. However, that interface is limited, and the API provided by PostgreSQL™ allows for random access to the objects contents, as if it was a local file.\nThe org.postgresql.largeobject package provides to Java the libpq C interface’s large object API. It consists of two classes, LargeObjectManager , which deals with creating, opening and deleting large objects, and LargeObject which deals with an individual object. For an example usage of this API, please see Processing Binary Data in JDBC.\nListen / Notify    Listen and Notify provide a simple form of signal or interprocess communication mechanism for a collection of processes accessing the same PostgreSQL™ database. For more information on notifications consult the main server documentation. This section only deals with the JDBC specific aspects of notifications.\nStandard LISTEN , NOTIFY , and UNLISTEN commands are issued via the standard Statement interface. To retrieve and process retrieved notifications the Connection must be cast to the PostgreSQL™ specific extension interface PGConnection . From there the getNotifications() method can be used to retrieve any outstanding notifications.\n NOTE\nA key limitation of the JDBC driver is that it cannot receive asynchronous notifications and must poll the backend to check if any notifications were issued. A timeout can be given to the poll function, but then the execution of statements from other threads will block.\n Example 9.2. Receiving Notifications    import java.sql.*; public class NotificationTest { public static void main(String args[]) throws Exception { Class.forName(\"org.postgresql.Driver\"); String url = \"jdbc:postgresql://localhost:5432/test\"; // Create two distinct connections, one for the notifier  // and another for the listener to show the communication  // works across connections although this example would  // work fine with just one connection.  Connection lConn = DriverManager.getConnection(url, \"test\", \"\"); Connection nConn = DriverManager.getConnection(url, \"test\", \"\"); // Create two threads, one to issue notifications and  // the other to receive them.  Listener listener = new Listener(lConn); Notifier notifier = new Notifier(nConn); listener.start(); notifier.start(); } } class Listener extends Thread { private Connection conn; private org.postgresql.PGConnection pgconn; Listener(Connection conn) throws SQLException { this.conn = conn; this.pgconn = conn.unwrap(org.postgresql.PGConnection.class); Statement stmt = conn.createStatement(); stmt.execute(\"LISTEN mymessage\"); stmt.close(); } public void run() { try { while (true) { org.postgresql.PGNotification notifications[] = pgconn.getNotifications(); // If this thread is the only one that uses the connection, a timeout can be used to  // receive notifications immediately:  // org.postgresql.PGNotification notifications[] = pgconn.getNotifications(10000);  if (notifications != null) { for (int i = 0; i \u003c notifications.length; i++) System.out.println(\"Got notification: \" + notifications[i].getName()); } // wait a while before checking again for new  // notifications  Thread.sleep(500); } } catch (SQLException sqle) { sqle.printStackTrace(); } catch (InterruptedException ie) { ie.printStackTrace(); } } } class Notifier extends Thread { private Connection conn; public Notifier(Connection conn) { this.conn = conn; } public void run() { while (true) { try { Statement stmt = conn.createStatement(); stmt.execute(\"NOTIFY mymessage\"); stmt.close(); Thread.sleep(2000); } catch (SQLException sqle) { sqle.printStackTrace(); } catch (InterruptedException ie) { ie.printStackTrace(); } } } } Server Prepared Statements    Motivation    The PostgreSQL™ server allows clients to compile sql statements that are expected to be reused to avoid the overhead of parsing and planning the statement for every execution. This functionality is available at the SQL level via PREPARE and EXECUTE beginning with server version 7.3, and at the protocol level beginning with server version 7.4, but as Java developers we really just want to use the standard PreparedStatement interface.\n NOTE\nPostgreSQL 9.2 release notes: prepared statements used to be optimized once, without any knowledgeof the parameters' values. With 9.2, the planner will use specific plans regarding to the parameters sent (the query will be planned at execution), except if the query is executed several times and the planner decides that the generic plan is not too much more expensive than the specific plans.\n Server side prepared statements can improve execution speed as\n It sends just statement handle (e.g. S_1) instead of full SQL text It enables use of binary transfer (e.g. binary int4, binary timestamps, etc); the parameters and results are much faster to parse It enables the reuse server-side execution plan The client can reuse result set column definition, so it does not have to receive and parse metadata on each execution  Activation    Previous versions of the driver used PREPARE and EXECUTE to implement server-prepared statements. This is supported on all server versions beginning with 7.3, but produced application-visible changes in query results, such as missing ResultSet metadata and row update counts. The current driver uses the V3 protocol-level equivalents which avoid these changes in query results.\nThe driver uses server side prepared statements by default when PreparedStatement API is used. In order to get to server-side prepare, you need to execute the query 5 times (that can be configured via prepareThreshold connection property).\nAn internal counter keeps track of how many times the statement has been executed and when it reaches the threshold it will start to use server side prepared statements.\nIt is generally a good idea to reuse the same PreparedStatement object for performance reasons, however the driver is able to server-prepare statements automatically across connection.prepareStatement(...) calls.\nFor instance:\nPreparedStatement ps = con.prepareStatement(\"select /*test*/ ?::int4\"); ps.setInt(1, 42); ps.executeQuery().close(); ps.close(); PreparedStatement ps = con.prepareStatement(\"select /*test*/ ?::int4\"); ps.setInt(1, 43); ps.executeQuery().close(); ps.close(); is less efficient than\nPreparedStatement ps = con.prepareStatement(\"select /*test*/ ?::int4\"); ps.setInt(1, 42); ps.executeQuery().close(); ps.setInt(1, 43); ps.executeQuery().close(); however pgJDBC can use server side prepared statements in both cases.\n Note\nThe Statement object is bound to a Connection , and it is not a good idea to access the same Statement and/or Connection from multiple concurrent threads (except cancel() , close() , and alike cases). It might be safer to just close() the statement rather than trying to cache it somehow.\n Server-prepared statements consume memory both on the client and the server, so pgJDBC limits the number of server-prepared statements per connection. It can be configured via preparedStatementCacheQueries (default 256 , the number of queries known to pgJDBC), and preparedStatementCacheSizeMiB (default 5 , that is the client side cache size in megabytes per connection). Only a subset of statement cache is server-prepared as some of the statements might fail to reach prepareThreshold .\nDeactivation    There might be cases when you would want to disable use of server-prepared statements. For instance, if you route connections through a balancer that is incompatible with server-prepared statements, you have little choice.\nYou can disable usage of server side prepared statements by setting prepareThreshold=0\nCorner cases    DDL    V3 protocol avoids sending column metadata on each execution, and BIND message specifies output column format. That creates a problem for cases like\nSELECT * FROM mytable; ALTER mytable ADD column ...; SELECT * FROM mytable; That results in cached plan must not change result type error, and it causes the transaction to fail.\nThe recommendation is:\n Use explicit column names in the SELECT list Avoid column type alters  DEALLOCATE ALL, DISCARD ALL    There are explicit commands to deallocate all server side prepared statements. It would result in the following server-side error message: prepared statement name is invalid. Of course it could defeat pgJDBC, however there are cases when you need to discard statements (e.g. after lots of DDLs)\nThe recommendation is:\n Use simple DEALLOCATE ALL and/or DISCARD ALL commands, avoid nesting the commands into pl/pgsql or alike. The driver does understand top-level DEALLOCATE/DISCARD commands, and it invalidates client-side cache as well Reconnect. The cache is per connection, so it would get invalidated if you reconnect  set search_path = …    PostgreSQL allows to customize search_path , and it provides great power to the developer. With great power the following case could happen:\nset search_path='app_v1'; SELECT * FROM mytable; set search_path='app_v2'; SELECT * FROM mytable; -- Does mytable mean app_v1.mytable or app_v2.mytable here? Server side prepared statements are linked to database object IDs, so it could fetch data from “old” app_v1.mytable table. It is hard to tell which behaviour is expected, however pgJDBC tries to track search_path changes, and it invalidates prepare cache accordingly.\nThe recommendation is:\n Avoid changing search_path often, as it invalidates server side prepared statements Use simple set search_path... commands, avoid nesting the commands into pl/pgsql or alike, otherwise pgJDBC won’t be able to identify search_path change  Re-execution of failed statements    It is a pity that a single cached plan must not change result type could cause the whole transaction to fail. The driver could re-execute the statement automatically in certain cases.\n In case the transaction has not failed (e.g. the transaction did not exist before execution of the statement that caused cached plan... error), then pgJDBC re-executes the statement automatically. This makes the application happy, and avoids unnecessary errors. In case the transaction is in a failed state, there’s nothing to do but rollback it. pgJDBC does have “automatic savepoint” feature, and it could automatically rollback and retry the statement. The behaviour is controlled via autosave property (default never ). The value of conservative would auto-rollback for the errors related to invalid server-prepared statements.   Note\nautosave might result in severe performance issues for long transactions, as PostgreSQL backend is not optimized for the case of long transactions and lots of savepoints.\n Replication connection    PostgreSQL replication connection does not allow to use server side prepared statements, so pgJDBC uses simple queries in the case where replication connection property is activated.\nUse of server-prepared statements for con.createStatement()    By default, pgJDBC uses server-prepared statements for PreparedStatement only, however you might want to activate server side prepared statements for regular Statement as well. For instance, if you execute the same statement through con.createStatement().executeQuery(...) , then you might improve performance by caching the statement. Of course it is better to use PreparedStatements explicitly, however the driver has an option to cache simple statements as well.\nYou can do that by setting preferQueryMode to extendedCacheEverything.\n Note\nthe option is more of a diagnostinc/debugging sort, so be careful how you use it .\n Bind placeholder datatypes    The database optimizes the execution plan for given parameter types. Consider the below case:\n-- create table rooms (id int4, name varchar); -- create index name__rooms on rooms(name); PreparedStatement ps = con.prepareStatement(\"select id from rooms where name=?\"); ps.setString(1, \"42\"); It works as expected, however what would happen if one uses setInt instead? ps.setInt(1, 42);\nEven though the result would be identical, the first variation ( setString case) enables the database to use index name__rooms , and the latter does not. In case the database gets 42 as integer, it uses the plan like where cast(name as int4) = ? .\nThe plan has to be specific for the ( SQL text ; parameter types ) combination, so the driver has to invalidate server side prepared statements in case the statement is used with different parameter types.\nThis gets especially painful for batch operations as you don’t want to interrupt the batch by using alternating datatypes.\nThe most typical case is as follows (don’t ever use this in production):\nPreparedStatement ps = con.prepareStatement(\"select id from rooms where ...\"); if (param instanceof String) { ps.setString(1, param); } else if (param instanceof Integer) { ps.setInt(1, ((Integer) param).intValue()); } else { // Does it really matter which type of NULL to use?  // In fact, it does since data types specify which server-procedure to call  ps.setNull(1, Types.INTEGER); } As you might guess, setString vs setNull(..., Types.INTEGER) result in alternating datatypes, and it forces the driver to invalidate and re-prepare server side statement.\nRecommendation is to use the consistent datatype for each bind placeholder, and use the same type for setNull . Check out org.postgresql.test.jdbc2.PreparedStatementTest.testAlternatingBindType example for more details.\nDebugging    In case you run into cached plan must not change result type or prepared statement \\\"S_2\\\" does not exist the following might be helpful to debug the case.\n Client logging. If you add loggerLevel=TRACE\u0026loggerFile=pgjdbc-trace.log, you would get trace of the messages send between the driver and the backend You might check org.postgresql.test.jdbc2.AutoRollbackTestSuite as it verifies lots of combinations  Example 9.3. Using server side prepared statements    import java.sql.*; public class ServerSidePreparedStatement { public static void main(String args[]) throws Exception { Class.forName(\"org.postgresql.Driver\"); String url = \"jdbc:postgresql://localhost:5432/test\"; Connection conn = DriverManager.getConnection(url, \"test\", \"\"); PreparedStatement pstmt = conn.prepareStatement(\"SELECT ?\"); // cast to the pg extension interface  org.postgresql.PGStatement pgstmt = pstmt.unwrap(org.postgresql.PGStatement.class); // on the third execution start using server side statements  pgstmt.setPrepareThreshold(3); for (int i = 1; i \u003c= 5; i++) { pstmt.setInt(1, i); boolean usingServerPrepare = pgstmt.isUseServerPrepare(); ResultSet rs = pstmt.executeQuery(); rs.next(); System.out.println(\"Execution: \" + i + \", Used server side: \" + usingServerPrepare + \", Result: \" + rs.getInt(1)); rs.close(); } pstmt.close(); conn.close(); } } Which produces the expected result of using server side prepared statements upon the third execution.\n   Execution Used server side Result     1 false 1   2 false 2   3 true 3   4 true 4   5 true 5    The example shown above requires the programmer to use PostgreSQL™ specific code in a supposedly portable API which is not ideal. Also it sets the threshold only for that particular statement which is some extra typing if we wanted to use that threshold for every statement. Let’s take a look at the other ways to set the threshold to enable server side prepared statements. There is already a hierarchy in place above a PreparedStatement , the Connection it was created from, and above that the source of the connection be it a Datasource or a URL. The server side prepared statement threshold can be set at any of these levels such that the value will be the default for all of it’s children.\n// pg extension interfaces org.postgresql.PGConnection pgconn; org.postgresql.PGStatement pgstmt; // set a prepared statement threshold for connections created from this url String url = \"jdbc:postgresql://localhost:5432/test?prepareThreshold=3\"; // see that the connection has picked up the correct threshold from the url Connection conn = DriverManager.getConnection(url, \"test\", \"\"); pgconn = conn.unwrap(org.postgresql.PGConnection.class); System.out.println(pgconn.getPrepareThreshold()); // Should be 3  // see that the statement has picked up the correct threshold from the connection PreparedStatement pstmt = conn.prepareStatement(\"SELECT ?\"); pgstmt = pstmt.unwrap(org.postgresql.PGStatement.class); System.out.println(pgstmt.getPrepareThreshold()); // Should be 3  // change the connection's threshold and ensure that new statements pick it up pgconn.setPrepareThreshold(5); PreparedStatement pstmt = conn.prepareStatement(\"SELECT ?\"); pgstmt = pstmt.unwrap(org.postgresql.PGStatement.class); System.out.println(pgstmt.getPrepareThreshold()); // Should be 5 Parameter Status Messages    PostgreSQL supports server parameters, also called server variables or, internally, Grand Unified Configuration (GUC) variables. These variables are manipulated by the SET command, postgresql.conf , ALTER SYSTEM SET , ALTER USER SET, ALTER DATABASE SET, the set_config(...) SQL-callable function, etc. See The PostgreSQL manual.\nFor a subset of these variables the server will automatically report changes to the value to the client driver and application. These variables are known internally as GUC_REPORT variables after the name of the flag that enables the functionality.\nThe server keeps track of all the variable scopes and reports when a variable reverts to a prior value, so the client doesn’t have to guess what the current value is and whether some server-side function could’ve changed it. Whenever the value changes, no matter why or how it changes, the server reports the new effective value in a Parameter Status protocol message to the client. pgJDBC uses many of these reports internally.\nAs of pgJDBC 42.2.6, it also exposes the parameter status information to user applications via the PGConnection extensions interface.\nMethods    Two methods on org.postgresql.PGConnection provide the client interface to reported parameters. Parameter names are case-insensitive and case-preserving.\n  Map PGConnection.getParameterStatuses() - return a map of all reported parameters and their values.\n  String PGConnection.getParameterStatus() - shorthand to retrieve one value by name, or null if no value has been reported.\n  See the PGConnection JavaDoc for details.\nExample    If you’re working directly with a java.sql.Connection you can\nimport org.postgresql.PGConnection; void my_function(Connection conn) { System.out.println(\"My application name is \" + ((PGConnection) conn).getParameterStatus(\"application_name\")); } Other client drivers    The libpq equivalent is the PQparameterStatus(...) API function.\nPhysical and Logical replication API    Postgres 9.4 (released in December 2014) introduced a new feature called logical replication. Logical replication allows changes from a database to be streamed in real-time to an external system. The difference between physical replication and logical replication is that logical replication sends data over in a logical format whereas physical replication sends data over in a binary format. Additionally logical replication can send over a single table, or database. Binary replication replicates the entire cluster in an all or nothing fashion; which is to say there is no way to get a specific table or database using binary replication\nPrior to logical replication keeping an external system synchronized in real time was problematic. The application would have to update/invalidate the appropriate cache entries, reindex the data in your search engine, send it to your analytics system, and so on.\nThis suffers from race conditions and reliability problems. For example if slightly different data gets written to two different datastores (perhaps due to a bug or a race condition), the contents of the datastores will gradually drift apart — they will become more and more inconsistent over time. Recovering from such gradual data corruption is difficult.\nLogical decoding takes the database’s write-ahead log (WAL), and gives us access to row-level change events: every time a row in a table is inserted, updated or deleted, that’s an event. Those events are grouped by transaction, and appear in the order in which they were committed to the database. Aborted/rolled-back transactions do not appear in the stream. Thus, if you apply the change events in the same order, you end up with an exact, transactionally consistent copy of the database. It’s looks like the Event Sourcing pattern that you previously implemented in your application, but now it’s available out of the box from the PostgreSQL database.\nFor access to real-time changes PostgreSQL provides the streaming replication protocol. Replication protocol can be physical or logical. Physical replication protocol is used for Master/Secondary replication. Logical replication protocol can be used to stream changes to an external system.\nSince the JDBC API does not include replication PGConnection implements the PostgreSQL API\nConfigure database    Your database should be configured to enable logical or physical replication\npostgresql.conf     Property max_wal_senders should be at least equal to the number of replication consumers Property wal_keep_segments should contain count wal segments that can’t be removed from database. Property wal_level for logical replication should be equal to logical. Property max_replication_slots should be greater than zero for logical replication, because logical replication can’t work without replication slot.  pg_hba.conf    Enable connect user with replication privileges to replication stream.\nlocal replication all trust host replication all 127.0.0.1/32 md5 host replication all ::1/128 md5 Configuration for examples    postgresql.conf\nmax_wal_senders = 4 # max number of walsender processes wal_keep_segments = 4 # in logfile segments, 16MB each; 0 disables wal_level = logical # minimal, replica, or logical max_replication_slots = 4 # max number of replication slots pg_hba.conf\n# Allow replication connections from localhost, by a user with the # replication privilege. local replication all trust host replication all 127.0.0.1/32 md5 host replication all ::1/128 md5 Logical replication    Logical replication uses a replication slot to reserve WAL logs on the server and also defines which decoding plugin to use to decode the WAL logs to the required format, for example you can decode changes as json, protobuf, etc. To demonstrate how to use the pgJDBC replication API we will use the test_decoding plugin that is include in the postgresql-contrib package, but you can use your own decoding plugin. There are a few on github which can be used as examples.\nIn order to use the replication API, the Connection has to be created in replication mode, in this mode the connection is not available to execute SQL commands, and can only be used with replication API. This is a restriction imposed by PostgreSQL.\nExample 9.4. Create replication connection.    String url = \"jdbc:postgresql://localhost:5432/postgres\"; Properties props = new Properties(); PGProperty.USER.set(props, \"postgres\"); PGProperty.PASSWORD.set(props, \"postgres\"); PGProperty.ASSUME_MIN_SERVER_VERSION.set(props, \"9.4\"); PGProperty.REPLICATION.set(props, \"database\"); PGProperty.PREFER_QUERY_MODE.set(props, \"simple\"); Connection con = DriverManager.getConnection(url, props); PGConnection replConnection = con.unwrap(PGConnection.class); The entire replication API is grouped in org.postgresql.replication.PGReplicationConnection and is available via org.postgresql.PGConnection#getReplicationAPI .\nBefore you can start replication protocol, you need to have replication slot, which can be also created via pgJDBC API.\nExample 9.5. Create replication slot via pgJDBC API    replConnection.getReplicationAPI() .createReplicationSlot() .logical() .withSlotName(\"demo_logical_slot\") .withOutputPlugin(\"test_decoding\") .make(); Once we have the replication slot, we can create a ReplicationStream.\nExample 9.6. Create logical replication stream.    PGReplicationStream stream = replConnection.getReplicationAPI() .replicationStream() .logical() .withSlotName(\"demo_logical_slot\") .withSlotOption(\"include-xids\", false) .withSlotOption(\"skip-empty-xacts\", true) .start(); The replication stream will send all changes since the creation of the replication slot or from replication slot restart LSN if the slot was already used for replication. You can also start streaming changes from a particular LSN position, in that case LSN position should be specified when you create the replication stream.\nExample 9.7. Create logical replication stream from particular position.    LogSequenceNumber waitLSN = LogSequenceNumber.valueOf(\"6F/E3C53568\"); PGReplicationStream stream = replConnection.getReplicationAPI() .replicationStream() .logical() .withSlotName(\"demo_logical_slot\") .withSlotOption(\"include-xids\", false) .withSlotOption(\"skip-empty-xacts\", true) .withStartPosition(waitLSN) .start(); Via withSlotOption we also can specify options that will be sent to our output plugin, this allows customize decoding. For example I have my own output plugin that has a property sensitive=true which will include changes by sensitive columns to change event.\nExample 9.8. Example output with include-xids=true    BEGIN 105779 table public.test_logic_table: INSERT: pk[integer]:1 name[character varying]:'previous value' COMMIT 105779 Example 9.9. Example output with include-xids=false    BEGIN table public.test_logic_table: INSERT: pk[integer]:1 name[character varying]:'previous value' COMMIT During replication the database and consumer periodically exchange ping messages. When the database or client do not receive ping message within the configured timeout, replication has been deemed to have stopped and an exception will be thrown and the database will free resources. In PostgreSQL the ping timeout is configured by the property wal_sender_timeout (default = 60 seconds). Replication stream in pgjdc can be configured to send feedback(ping) when required or by time interval. It is recommended to send feedback(ping) to the database more often than configured wal_sender_timeout . In production I use value equal to wal_sender_timeout / 3 . It’s avoids a potential problems with networks and changes to be streamed without disconnects by timeout. To specify the feedback interval use withStatusInterval method.\nExample 9.10. Replication stream with configured feedback interval equal to 20 sec    PGReplicationStream stream = replConnection.getReplicationAPI() .replicationStream() .logical() .withSlotName(\"demo_logical_slot\") .withSlotOption(\"include-xids\", false) .withSlotOption(\"skip-empty-xacts\", true) .withStatusInterval(20, TimeUnit.SECONDS) .start(); After create PGReplicationStream , it’s time to start receive changes in real-time.\nChanges can be received from stream as blocking( org.postgresql.replication.PGReplicationStream#read ) or as non-blocking (org.postgresql.replication.PGReplicationStream#readPending ). Both methods receive changes as a java.nio.ByteBuffer with the payload from the send output plugin. We can’t receive part of message, only the full message that was sent by the output plugin. ByteBuffer contains message in format that is defined by the decoding output plugin, it can be simple String, json, or whatever the plugin determines. That why pgJDBC returns the raw ByteBuffer instead of making assumptions.\nExample 9.11. Example send message from output plugin.    OutputPluginPrepareWrite(ctx, true); appendStringInfo(ctx-\u003eout, \"BEGIN %u\", txn-\u003exid); OutputPluginWrite(ctx, true); Example 9.12. Receive changes via replication stream.\nwhile (true) { //non blocking receive message  ByteBuffer msg = stream.readPending(); if (msg == null) { TimeUnit.MILLISECONDS.sleep(10 L); continue; } int offset = msg.arrayOffset(); byte[] source = msg.array(); int length = source.length - offset; System.out.println(new String(source, offset, length)); } As mentioned previously, replication stream should periodically send feedback to the database to prevent disconnect via timeout. Feedback is automatically sent when read or readPending are called if it’s time to send feedback. Feedback can also be sent via org.postgresql.replication.PGReplicationStream#forceUpdateStatus() regardless of the timeout. Another important duty of feedback is to provide the server with the Logial Sequence Number (LSN) that has been successfully received and applied to consumer, it is necessary for monitoring and to truncate/archive WAL’s that that are no longer needed. In the event that replication has been restarted, it’s will start from last successfully processed LSN that was sent via feedback to database.\nThe API provides the following feedback mechanism to indicate the successfully applied LSN by the current consumer. LSN’s before this can be truncated or archived. org.postgresql.replication.PGReplicationStream#setFlushedLSN and org.postgresql.replication.PGReplicationStream#setAppliedLSN . You always can get last receive LSN via org.postgresql.replication.PGReplicationStream#getLastReceiveLSN .\nExample 9.13. Add feedback indicating a successfully process LSN    while (true) { //Receive last successfully send to queue message. LSN ordered.  LogSequenceNumber successfullySendToQueue = getQueueFeedback(); if (successfullySendToQueue != null) { stream.setAppliedLSN(successfullySendToQueue); stream.setFlushedLSN(successfullySendToQueue); } //non blocking receive message  ByteBuffer msg = stream.readPending(); if (msg == null) { TimeUnit.MILLISECONDS.sleep(10 L); continue; } asyncSendToQueue(msg, stream.getLastReceiveLSN()); } Example 9.14. Full example of logical replication    String url = \"jdbc:postgresql://localhost:5432/test\"; Properties props = new Properties(); PGProperty.USER.set(props, \"postgres\"); PGProperty.PASSWORD.set(props, \"postgres\"); PGProperty.ASSUME_MIN_SERVER_VERSION.set(props, \"9.4\"); PGProperty.REPLICATION.set(props, \"database\"); PGProperty.PREFER_QUERY_MODE.set(props, \"simple\"); Connection con = DriverManager.getConnection(url, props); PGConnection replConnection = con.unwrap(PGConnection.class); replConnection.getReplicationAPI() .createReplicationSlot() .logical() .withSlotName(\"demo_logical_slot\") .withOutputPlugin(\"test_decoding\") .make(); //some changes after create replication slot to demonstrate receive it sqlConnection.setAutoCommit(true); Statement st = sqlConnection.createStatement(); st.execute(\"insert into test_logic_table(name) values('first tx changes')\"); st.close(); st = sqlConnection.createStatement(); st.execute(\"update test_logic_table set name = 'second tx change' where pk = 1\"); st.close(); st = sqlConnection.createStatement(); st.execute(\"delete from test_logic_table where pk = 1\"); st.close(); PGReplicationStream stream = replConnection.getReplicationAPI() .replicationStream() .logical() .withSlotName(\"demo_logical_slot\") .withSlotOption(\"include-xids\", false) .withSlotOption(\"skip-empty-xacts\", true) .withStatusInterval(20, TimeUnit.SECONDS) .start(); while (true) { //non blocking receive message  ByteBuffer msg = stream.readPending(); if (msg == null) { TimeUnit.MILLISECONDS.sleep(10 L); continue; } int offset = msg.arrayOffset(); byte[] source = msg.array(); int length = source.length - offset; System.out.println(new String(source, offset, length)); //feedback  stream.setAppliedLSN(stream.getLastReceiveLSN()); stream.setFlushedLSN(stream.getLastReceiveLSN()); } Where output looks like this, where each line is a separate message.\nBEGIN table public.test_logic_table: INSERT: pk[integer]:1 name[character varying]:'first tx changes' COMMIT BEGIN table public.test_logic_table: UPDATE: pk[integer]:1 name[character varying]:'second tx change' COMMIT BEGIN table public.test_logic_table: DELETE: pk[integer]:1 COMMIT Physical replication    API for physical replication looks like the API for logical replication. Physical replication does not require a replication slot. And ByteBuffer will contain the binary form of WAL logs. The binary WAL format is a very low level API, and can change from version to version. That is why replication between different major PostgreSQL versions is not possible. But physical replication can contain many important data, that is not available via logical replication. That is why pgjdc contains an implementation for both.\nExample 9.15. Use physical replication\nLogSequenceNumber lsn = getCurrentLSN(); Statement st = sqlConnection.createStatement(); st.execute(\"insert into test_physic_table(name) values('previous value')\"); st.close(); PGReplicationStream stream = pgConnection .getReplicationAPI() .replicationStream() .physical() .withStartPosition(lsn) .start(); ByteBuffer read = stream.read(); Arrays    PostgreSQL™ provides robust support for array data types as column types, function arguments and criteria in where clauses. There are several ways to create arrays with pgJDBC.\nThe java.sql. Connection.createArrayOf(String, Object[]) can be used to create an java.sql. Array from Object[] instances (Note: this includes both primitive and object multi-dimensional arrays). A similar method org.postgresql.PGConnection.createArrayOf(String, Object) provides support for primitive array types. The java.sql.Array object returned from these methods can be used in other methods, such as PreparedStatement.setArray(int, Array).\nThe following types of arrays support binary representation in requests and can be used in PreparedStatement.setObject\n   Java Type Supported binary PostgreSQL™ Types Default PostgreSQL™ Type     short[] , Short[] int2[] int2[]   int[] , Integer[] int4[] int4[]   long[] , Long[] int8[] int8[]   float[] , Float[] float4[] float4[]   double[] , Double[] float8[] float8[]   boolean[] , Boolean[] bool[] bool[]   String[] varchar[] , text[] varchar[]   byte[][] bytea[] bytea[]    ","description":"","title":"PostgreSQL™ Extensions to the JDBC API","uri":"/pgjdbc/documentation/server-prepare/"},{"categories":null,"content":"The PostgreSQL™ JDBC driver is not thread safe. The PostgreSQL server is not threaded. Each connection creates a new process on the server as such any concurrent requests to the process would have to be serialized. The driver makes no guarantees that methods on connections are synchronized. It will be up to the caller to synchronize calls to the driver.\nA notable exception is org/postgresql/jdbc/TimestampUtils.java which is threadsafe.\n","description":"","title":"Using the Driver in a Multithreaded or a Servlet Environment","uri":"/pgjdbc/documentation/thread/"},{"categories":null,"content":"JDBC 2 introduced standard connection pooling features in an add-on API known as the JDBC 2.0 Optional Package (also known as the JDBC 2.0 Standard Extension). These features have since been included in the core JDBC 3 API.\nThe JDBC API provides a client and a server interface for connection pooling. The client interface is javax.sql.DataSource , which is what application code will typically use to acquire a pooled database connection. The server interface is javax.sql.ConnectionPoolDataSource , which is how most application servers will interface with the PostgreSQL™ JDBC driver.\nIn an application server environment, the application server configuration will typically refer to the PostgreSQL™ ConnectionPoolDataSource implementation, while the application component code will typically acquire a DataSource implementation provided by the application server (not by PostgreSQL™).\nFor an environment without an application server, PostgreSQL™ provides two implementations of DataSource which an application can use directly. One implementation performs connection pooling, while the other simply provides access to database connections through the DataSource interface without any pooling. Again, these implementations should not be used in an application server environment unless the application server does not support the ConnectionPoolDataSource interface.\nApplication Servers ConnectionPoolDataSource    PostgreSQL™ includes one implementation of ConnectionPoolDataSource named org.postgresql.ds.PGConnectionPoolDataSource .\nJDBC requires that a ConnectionPoolDataSource be configured via JavaBean properties, shown in Table 11.1, “ConnectionPoolDataSource Configuration Properties”, so there are get and set methods for each of these properties.\nTable 11.1. ConnectionPoolDataSource Configuration Properties       Property Type Description     serverName STRING PostgreSQL™ database server host name   databaseName STRING PostgreSQL™ database name   portNumber INT TCP port which the PostgreSQL™ database server is listening on (or 0 to use the default port)   user STRING User used to make database connections   password STRING Password used to make database connections   ssl BOOLEAN If true , use SSL encrypted connections (default false )   sslfactory STRING Custom javax.net.ssl.SSLSocketFactory class name (see the section called [“Custom   SSLSocketFactory”](ssl-factory.html))     defaultAutoCommit BOOLEAN Whether connections should have autocommit enabled or disabled when they are supplied to the caller. The default is false , to disable autocommit.    Many application servers use a properties-style syntax to configure these properties, so it would not be unusual to enter properties as a block of text. If the application server provides a single area to enter all the properties, they might be listed like this:\nserverName=localhost\ndatabaseName=test\nuser=testuser\npassword=testpassword\nOr, if semicolons are used as separators instead of newlines, it could look like this:\nserverName=localhost;databaseName=test;user=testuser;password=testpassword\nApplications DataSource    PostgreSQL™ includes two implementations of DataSource , as shown in Table 11.2, “DataSource Implementations”.\nOne that does pooling and the other that does not. The pooling implementation does not actually close connections when the client calls the close method, but instead returns the connections to a pool of available connections for other clients to use. This avoids any overhead of repeatedly opening and closing connections, and allows a large number of clients to share a small number of database connections.\nThe pooling data-source implementation provided here is not the most feature-rich in the world. Among other things, connections are never closed until the pool itself is closed; there is no way to shrink the pool. As well, connections requested for users other than the default configured user are not pooled. Its error handling sometimes cannot remove a broken connection from the pool. In general it is not recommended to use the PostgreSQL™ provided connection pool. Check your application server or check out the excellent jakarta commons DBCP project.\nTable 11.2. DataSource Implementations       Pooling Implementation Class     No `org.postgresql.ds. PGSimpleDataSource|   Yes `org.postgresql.ds. PGPoolingDataSource|    Both implementations use the same configuration scheme. JDBC requires that a DataSource be configured via JavaBean properties, shown in Table 11.3, “DataSource Configuration Properties”, so there are get and set methods for each of these properties.\nTable 11.3. DataSource Configuration Properties       Property Type Description     serverName STRING PostgreSQL™ database server host name   databaseName STRING PostgreSQL™ database name   portNumber INT TCP port which the PostgreSQL™ database server is listening on (or 0 to use the default port)   user STRING User used to make database connections   password STRING Password used to make database connections   ssl BOOLEAN If true, use SSL encrypted connections (default false)   sslfactory STRING Custom javax.net.ssl. SSLSocketFactory class name (see the section called “Custom SSLSocketFactory”)    The pooling implementation requires some additional configuration properties, which are shown in Table 11.4, “Additional Pooling DataSource Configuration Properties.\nTable 11.4. Additional Pooling DataSource Configuration Properties       Property Type Description     dataSourceName STRING Every pooling DataSource must have a unique name.   initialConnections INT The number of database connections to be created when the pool is initialized.   maxConnections INT The maximum number of open database connections to allow. When more connections are requested, the caller will hang until a connection is returned to the pool.    Example 11.1, “DataSource Code Example” shows an example of typical application code using a pooling DataSource.\nExample 11.1. DataSource Code Example    Code to initialize a pooling DataSource might look like this:\nPGPoolingDataSource source = new PGPoolingDataSource(); source.setDataSourceName(\"A Data Source\"); source.setServerNames(new String[] { \"localhost\" }); source.setDatabaseName(\"test\"); source.setUser(\"testuser\"); source.setPassword(\"testpassword\"); source.setMaxConnections(10);  Note\nsetServerName has been deprecated in favour of setServerNames. This was done to support multiple hosts.\n Then code to use a connection from the pool might look like this.\n Note\nit is critical that the connections are eventually closed. Else the pool will “leak” connections and will eventually lock all the clients out.\n try (Connection conn = source.getConnection()) { // use connection } catch (SQLException e) { // log error } Data Sources and JNDI    All the ConnectionPoolDataSource and DataSource implementations can be stored in JNDI. In the case of the nonpooling implementations, a new instance will be created every time the object is retrieved from JNDI, with the same settings as the instance that was stored. For the pooling implementations, the same instance will be retrieved as long as it is available (e.g., not a different JVM retrieving the pool from JNDI), or a new instance with the same settings created otherwise.\nIn the application server environment, typically the application server’s DataSource instance will be stored in JNDI, instead of the PostgreSQL™ ConnectionPoolDataSource implementation.\nIn an application environment, the application may store the DataSource in JNDI so that it doesn’t have to make a reference to the DataSource available to all application components that may need to use it. An example of this is shown in Example 11.2, “DataSource JNDI Code Example”.\nExample 11.2. DataSource JNDI Code Example    Application code to initialize a pooling DataSource and add it to JNDI might look like this:\nPGPoolingDataSource source = new PGPoolingDataSource(); source.setDataSourceName(\"A Data Source\"); source.setServerName(\"localhost\"); source.setDatabaseName(\"test\"); source.setUser(\"testuser\"); source.setPassword(\"testpassword\"); source.setMaxConnections(10); new InitialContext().rebind(\"DataSource\", source); Then code to use a connection from the pool might look like this:\nConnection conn = null; try { DataSource source = (DataSource) new InitialContext().lookup(\"DataSource\"); conn = source.getConnection(); // use connection } catch (SQLException e) { // log error } catch (NamingException e) { // DataSource wasn't found in JNDI } finally { if (con != null) { try { conn.close(); } catch (SQLException e) {} } } Tomcat setup     NOTE\nThe postgresql.jar file must be placed in $CATALINA_HOME/common/lib in both Tomcat 4 and 5.\n The absolute easiest way to set this up in either tomcat instance is to use the admin web application that comes with Tomcat, simply add the datasource to the context you want to use it in.\nSetup for Tomcat 4 place the following inside the \u003c Context\u003e tag inside conf/server.xml\n\u003cResource name=\"jdbc/postgres\" scope=\"Shareable\" type=\"javax.sql.DataSource\"/\u003e \u003cResourceParams name=\"jdbc/postgres\"\u003e \u003cparameter\u003e \u003cname\u003evalidationQuery\u003c/name\u003e \u003cvalue\u003eselect version();\u003c/value\u003e \u003c/parameter\u003e \u003cparameter\u003e \u003cname\u003eurl\u003c/name\u003e \u003cvalue\u003ejdbc:postgresql://localhost/davec\u003c/value\u003e \u003c/parameter\u003e \u003cparameter\u003e \u003cname\u003epassword\u003c/name\u003e \u003cvalue\u003edavec\u003c/value\u003e \u003c/parameter\u003e \u003cparameter\u003e \u003cname\u003emaxActive\u003c/name\u003e \u003cvalue\u003e4\u003c/value\u003e \u003c/parameter\u003e \u003cparameter\u003e \u003cname\u003emaxWait\u003c/name\u003e \u003cvalue\u003e5000\u003c/value\u003e \u003c/parameter\u003e \u003cparameter\u003e \u003cname\u003edriverClassName\u003c/name\u003e \u003cvalue\u003eorg.postgresql.Driver\u003c/value\u003e \u003c/parameter\u003e \u003cparameter\u003e \u003cname\u003eusername\u003c/name\u003e \u003cvalue\u003edavec\u003c/value\u003e \u003c/parameter\u003e \u003cparameter\u003e \u003cname\u003emaxIdle\u003c/name\u003e \u003cvalue\u003e2\u003c/value\u003e \u003c/parameter\u003e \u003c/ResourceParams\u003e Setup for Tomcat 5, you can use the above method, except that it goes inside the \u003c DefaultContext\u003e tag inside the \u003c Host\u003e tag. eg. \u003c Host\u003e … \u003c DefaultContext\u003e …\nAlternatively there is a conf/Catalina/hostname/context.xml file. For example http://localhost:8080/servlet-example has a directory $CATALINA_HOME/conf/Catalina/localhost/servlet-example.xml file. Inside this file place the above xml inside the \u003c Context\u003e tag\nThen you can use the following code to access the connection.\nimport javax.naming.*; import javax.sql.*; import java.sql.*; public class DBTest { String foo = \"Not Connected\"; int bar = -1; public void init() { try { Context ctx = new InitialContext(); if (ctx == null) throw new Exception(\"Boom - No Context\"); // /jdbc/postgres is the name of the resource above  DataSource ds = (DataSource) ctx.lookup(\"java:comp/env/jdbc/postgres\"); if (ds != null) { Connection conn = ds.getConnection(); if (conn != null) { foo = \"Got Connection \" + conn.toString(); Statement stmt = conn.createStatement(); ResultSet rst = stmt.executeQuery(\"select id, foo, bar from testdata\"); if (rst.next()) { foo = rst.getString(2); bar = rst.getInt(3); } conn.close(); } } } catch (Exception e) { e.printStackTrace(); } } public String getFoo() { return foo; } public int getBar() { return bar; } } ","description":"","title":"Connection Pools and Data Sources","uri":"/pgjdbc/documentation/datasource/"},{"categories":null,"content":"The PostgreSQL JDBC Driver supports the use of logging (or tracing) to help resolve issues with the pgJDBC Driver when is used in your application.\nThe pgJDBC Driver uses the logging APIs of java.util.logging that is part of Java since JDK 1.4, which makes it a good choice for the driver since it doesn’t add any external dependency for a logging framework. java.util.logging is a very rich and powerful tool, it’s beyond the scope of these docs to explain how to use it to it’s full potential, for that please refer to Java Logging Overview.\nThis logging support was added since version 42.0.0 of the pgJDBC Driver, and previous versions uses a custom mechanism to enable logging that it is replaced by the use of java.util.logging in current versions, the old mechanism is no longer available.\n NOTE\nPlease note that while most people asked the use of a Logging Framework for a long time, this support is mainly to debug the driver itself and not for general sql query debug.\n Configuration    The Logging APIs offer both static and dynamic configuration control. Static control enables field service staff to set up a particular configuration and then re-launch the application with the new logging settings. Dynamic control allows for updates to the logging configuration within a currently running program.\nThe root logger used by the pgJDBC driver is org.postgresql .\nEnable logging by using logging.properties file    The default Java logging framework stores its configuration in a file called logging.properties . Settings are stored per line using a dot notation format. Java installs a global configuration file in the lib folder of the Java installation directory, although you can use a separate configuration file by specifying the java.util.logging.config.file property when starting a Java program. logging.properties files can also be created and stored with individual projects.\nThe following is an example of setting that you can make in the logging.properties :\n# Specify the handler, the handlers will be installed during VM startup. handlers = java.util.logging.FileHandler # Default global logging level. .level = OFF # Default file output is in user's home directory. java.util.logging.FileHandler.pattern = %h/pgjdbc%u.log java.util.logging.FileHandler.limit = 5000000 java.util.logging.FileHandler.count = 20 java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter java.util.logging.FileHandler.level = FINEST java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$s %2$s %5$s%6$s%n # Facility specific properties. org.postgresql.level = FINEST And when you run your application you pass the system property:\njava -jar -Djava.util.logging.config.file=logging.properties run.jar\n","description":"","title":"Logging using java.util.logging","uri":"/pgjdbc/documentation/logging/"},{"categories":null,"content":"If you have not yet read it, you are advised you read the JDBC API Documentation (supplied with Oracle’s JDK) and the JDBC Specification. Both are available from here.\nDocs contains updated information not included in this manual including Javadoc class documentation and a FAQ. Additionally it offers precompiled drivers.\n","description":"","title":"Further Reading","uri":"/pgjdbc/documentation/reading/"},{"categories":null,"content":"Changed     fix: revert change in PR #1986 where float was aliased to float4 from float8. float now aliases to float8 PR #2598 fixes Issue #2597  Commits by author    Dave Cramer (5):\n fix: revert change in [PR 2597](https://github.com/pgjdbc/pgjdbc/pull/2597) where float was aliased to float4 from float8. float now aliases to float8 (#2598) ","description":"","title":"PostgreSQL JDBC Driver 42.5.0 Released","uri":"/pgjdbc/changelogs/2022-08-24-42.5.0-release/"},{"categories":null,"content":"Changed     fix: add alias to the generated getUDT() query for clarity PR #2553  Added     fix: make setObject accept UUID array PR #2587  Fixed     fix: regression with GSS. Changes introduced to support building with Java 17 caused failures Issue #2588 fix: set a timeout to get the return from requesting SSL upgrade. PR #2572 feat: synchronize statement executions (e.g. avoid deadlock when Connection.isValid is executed from concurrent threads)  Commits by author    Dave Cramer (7):\n Revert revert commits made in PR 2580 [PR 2583](https://github.com/pgjdbc/pgjdbc/pull/2583) fix mismatched types for invokeExact. Have to tell invokeExact what type we are expecting [PR 2589](https://github.com/pgjdbc/pgjdbc/pull/2589) update last copyright year [PR 2593](https://github.com/pgjdbc/pgjdbc/pull/2593) fix erroneous method signature and null subjectCallAs [PR 2595](https://github.com/pgjdbc/pgjdbc/pull/2595)  Sasa Vilic (1):\n fix: make setObject accept UUID array [PR 2587](https://github.com/pgjdbc/pgjdbc/pull/2587)  Andrei Lurie (1):\n fix: add alias to the generated getUDT() query for clarity (PR #2553)[https://github.com/pgjdbc/pgjdbc/pull/2553] ","description":"","title":"PostgreSQL JDBC Driver 42.4.2 Released","uri":"/pgjdbc/changelogs/2022-08-17-42.4.2-release/"},{"categories":null,"content":"Security     fix: CVE-2022-31197 Fixes SQL generated in PgResultSet.refresh() to escape column identifiers so as to prevent SQL injection.  Previously, the column names for both key and data columns in the table were copied as-is into the generated SQL. This allowed a malicious table with column names that include statement terminator to be parsed and executed as multiple separate commands. Also adds a new test class ResultSetRefreshTest to verify this change. Reported by Sho Kato    Changed     chore: skip publishing pgjdbc-osgi-test to Central chore: bump Gradle to 7.5 test: update JUnit to 5.8.2  Added     chore: added Gradle Wrapper Validation for verifying gradle-wrapper.jar chore: added “permissions: contents: read” for GitHub Actions to avoid unintentional modifications by the CI chore: support building pgjdbc with Java 17  Commits by author    Dave Cramer (9):\n bump gradle to version 3 to fix compile errors with jdk17 [PR 2550](https://github.com/pgjdbc/pgjdbc/pull/2550) update the website content [PR 2578](https://github.com/pgjdbc/pgjdbc/pull/2578)  Sehrope Sarkuni (1):\nFix SQL generated in PgResultSet.refresh() to escape column identifiers so as to prevent SQL injection.  Vladimir Sitnikov (34):\nbump system-stubs-jupiter to 2.0.1 to support Java 16+ update JUnit to 5.8.2 migrate DriverTest to JUnit5 bump Gradle to 7.5 ","description":"","title":"PostgreSQL JDBC Driver 42.4.1 Released","uri":"/pgjdbc/changelogs/2022-08-03-42.4.1-release/"},{"categories":null,"content":"Changed     fix: added GROUP_STARTUP_PARAMETERS boolean property to determine whether or not to group startup parameters in a transaction (default=false like 42.2.x) fixes Issue #2425 pgbouncer cannot deal with transactions in statement pooling mode PR #2425  Fixed     fix: queries with up to 65535 (inclusive) parameters are supported now (previous limit was 32767) PR #2525, Issue #1311 fix: workaround JarIndex parsing issue by using groupId/artifactId-version directory namings. Regression since 42.2.13. PR #2531, issue #2527 fix: use Locale. ROOT for toUpperCase() toLowerCase() calls doc: add Vladimir Sitnikov’s PGP key fix: return correct base type for domain from getUDTs PR #2520 Issue #2522 perf: utcTz static and renamed to UTC_TIMEZONE PR #2519 doc: fix release version for #2377 (it should be 42.3.6, not 42.3.5)  Commits by author    Andrei Lurie (1):\n fix: return correct base type for domain from getUDTs [PR 2520](https://github.com/pgjdbc/pgjdbc/pull/2520) (#2522)  Dave Cramer (3):\n fix: added GROUP_STARTUP_PARAMETERS boolean property to determine whether or not to group startup parameters in a transaction or not fixes Issue 2423 pgbouncer cannot deal with transactions in statement pooling mode [PR 2425](https://github.com/pgjdbc/pgjdbc/pull/2425)  Jorge Solórzano (1):\n chore: Make the readme version agnostic [PR 2540](https://github.com/pgjdbc/pgjdbc/pull/2540)  Sven Diedrichsen (1):\n Made utcTz static and renamed to UTC_TIMEZONE [PR 2519](https://github.com/pgjdbc/pgjdbc/pull/2519)  Vladimir Sitnikov (24):\n doc: fix release version for [PR 2377](https://github.com/pgjdbc/pgjdbc/pull/2377) (it should be 42.3.6, not 42.3.5) ","description":"","title":"PostgreSQL JDBC Driver 42.4.0 Released","uri":"/pgjdbc/changelogs/2022-06-09-42.4.0-release/"},{"categories":null,"content":"Changed    Added    Fixed     fix: close refcursors when underlying cursor==null instead of relying on defaultRowFetchSize PR #2377  Commits by author    Dave Cramer (2):\n Fix heading format for version numbers [PR 2504](https://github.com/pgjdbc/pgjdbc/pull/2504)  Vladimir Sitnikov (1):\n fix: close refcursors when underlying cursor==null instead of relying on defaultRowFetchSize [PR #2377](https://github.com/pgjdbc/pgjdbc/pull/2377) ","description":"","title":"PostgreSQL JDBC Driver 42.3.6 Released","uri":"/pgjdbc/changelogs/2022-05-24-42.3.6-release/"},{"categories":null,"content":"Known issues     Regression since 42.3.2: “cursor \u003cunnamed portal 1\u003e does not exist” when using ResultSet.setFetchSize from CallableStatement, fixed in 42.3.6 (see PG #2377)  Changed     test: polish TimestampUtilsTest chore: use GitHub Action concurrency feature to terminate CI jobs on fast PR pushes  Added     Added KEYS file to allow for verifying artifacts PR 2499  Fixed     perf: enable tcpNoDelay by default PR 2495. This is a regression from 42.2.x versions where tcpNoDelay defaulted to true docs: fix readme.md after PR 2495 PR 2496 feat: targetServerType=preferPrimary connection parameter PR 2483 fix: revert removal of toOffsetDateTime(String timestamp) fixes Issue #2497 PR 2501  Commits by author    Dave Cramer (4):\n move version to 42.3.5 [PR 2493](https://github.com/pgjdbc/pgjdbc/pull/2493) Added KEYS file to allow for verifying artifacts [PR 2499](https://github.com/pgjdbc/pgjdbc/pull/2499) fix: revert removal of toOffsetDateTime(String timestamp) fixes #Issue 2497 [PR 2501](https://github.com/pgjdbc/pgjdbc/pull/2501)  Dmitriy Mukhin (1):\n feat: targetServerType=preferPrimary connection parameter [PR 2483](https://github.com/pgjdbc/pgjdbc/pull/2483)  Olivier Bourgain (2):\n perf: enable tcpNoDelay by default [PR 2495](https://github.com/pgjdbc/pgjdbc/pull/2495) docs: fix readme.md after [PR 2495](https://github.com/pgjdbc/pgjdbc/pull/2495) (#2496)  Vladimir Sitnikov (1):\n test: polish TimestampUtilsTest chore: use GitHub Action concurrency feature to terminate CI jobs on fast PR pushes ","description":"","title":"PostgreSQL JDBC Driver 42.3.5 Released","uri":"/pgjdbc/changelogs/2022-05-04-42.3.5-release/"},{"categories":null,"content":"Known issues     Regression since 42.3.2: “cursor \u003cunnamed portal 1\u003e does not exist” when using ResultSet.setFetchSize from CallableStatement, fixed in 42.3.6 (see PG #2377)  Changed     fix: change name of build cache PR 2471 feat: add support for ResultSet#getObject(OffsetTime.class) and PreparedStatement#setObject(OffsetTime.class) PR 2467 fix: Use non-synchronized getTimeZone in TimestampUtils PR 2451 docs: Fix CHANGELOG.md misformatted markdown headings PR 2461 docs: remove loggerLevel and loggerFile from docs and issues #2489 feat: use direct wire format -\u003e LocalDate conversion without resorting to java.util. Date, java.util. Calendar, and default timezones PR 2464 fixes Issue #2221  Added    Fixed     docs: Update testing documentation PR 2446 fix: Throw an exception if the driver cannot parse the URL instead of returning NULL fixes Issue #2421 PR 2441 fix: Use PGProperty instead of the property names directly PR 2444 docs: update changelog, missing links at bottom and formatting PR 2460 fix: Remove isDeprecated from PGProperty. It was originally intended to help produce automated docs. Fixes #Issue 2479 PR 2480 fix: change PGInterval parseISO8601Format to support fractional second PR 2457 fix: More test and fix for issues discovered by PR #2476 PR #2488  Commits by author    Dave Cramer (8):\n docs: Update testing documentation PR 2446 fix: Throw an exception if the driver cannot parse the URL instead of returning NULL fixes Issue PR 2421 (#2441) fix: Use PGProperty instead of the property names directly PR 2444 docs: update changelog, missing links at bottom and formatting PR 2460 added post for 42.2.25 PR 2466 change name of build cache PR 2471 Remove isDeprecated from PGProperty. It was originally intended to help produce automated docs. Fixes #Issue 2479 PR 2480  Fabio Cechinel Veronez (1):\n docs: Fix CHANGELOG.md misformatted markdown headings PR 2461  Uwe Schindler (2):\n feat: add support for ResultSet#getObject(OffsetTime.class) and PreparedStatement#setObject(OffsetTime.class) PR 2467  Wei Su (1):\n GSS login to use TGT from keytab fixes Issue 2469 PR 2470  paulo-kluh (1):\n fix: change PGInterval parseISO8601Format to support fractional second PR 2457  吴伟杰 (1):\n Use non-synchronized getTimeZone in TimestampUtils PR 2451  Contributors to this release    We thank the following people for their contributions to this release.\nUwe Schindler\nWei Su\nFabio Cechinel Veronez\npaulo-kluh\n吴伟杰\n","description":"","title":"PostgreSQL JDBC Driver 42.3.4 Released","uri":"/pgjdbc/changelogs/2022-04-15-42.3.4-release/"},{"categories":null,"content":"Known issues     Regression since 42.3.2: “cursor \u003cunnamed portal 1\u003e does not exist” when using ResultSet.setFetchSize from CallableStatement, fixed in 42.3.6 (see PG #2377)  Changed     fix: Removed loggerFile and loggerLevel configuration. While the properties still exist. They can no longer be used to configure the driver logging. Instead use java.util.logging configuration mechanisms such as logging.properties .  Added    Fixed    Commits by author    Dave Cramer (5):\n add: security policy link to index PR 2440 Update: SECURITY.md PR 2445 fix: javadocs PR 2454  Contributors to this release    We thank the following people for their contributions to this release.\nSehrope Sarkuni\n","description":"","title":"PostgreSQL JDBC Driver 42.3.3 Released","uri":"/pgjdbc/changelogs/2022-02-15-42.3.3-release/"},{"categories":null,"content":"Security     CVE-2022-21724 pgjdbc instantiates plugin instances based on class names provided via authenticationPluginClassName, sslhostnameverifier, socketFactory, sslfactory, sslpasswordcallback connection properties. However, the driver did not verify if the class implements the expected interface before instantiating the class. This would allow a malicious class to be instantiated that could execute arbitrary code from the JVM. Fixed in commit  Commits by author    ","description":"","title":"PostgreSQL JDBC Driver 42.2.25 Released","uri":"/pgjdbc/changelogs/2021-02-01-42.2.25-release/"},{"categories":null,"content":"Known issues     Regression since 42.3.2: “cursor \u003cunnamed portal 1\u003e does not exist” when using ResultSet.setFetchSize from CallableStatement, fixed in 42.3.6 (see PG #2377)  Security     CVE-2022-21724 pgjdbc instantiates plugin instances based on class names provided via authenticationPluginClassName, sslhostnameverifier, socketFactory, sslfactory, sslpasswordcallback connection properties. However, the driver did not verify if the class implements the expected interface before instantiating the class. This would allow a malicious class to be instantiated that could execute arbitrary code from the JVM. Fixed in commit  Changed     perf: read in_hot_standby GUC on connection PR #2334 test: materialized view privileges PR #2209 fixes Issue #2060 docs: add info about convenience maven project PR #2407 docs: Document timezone reversal from POSIX to ISO PR #2413 fix: we will ask the server if it supports GSS Encryption if gssEncryption is prefer or require PR #2396 remove the need to have a ticket in the cache before asking the server if gss encryptions are supported docs: remove Java 6 and 7 references from contributing PR #2385 style: remove Java 8 / JDBC 4.2 checks PR #2383 Remove all remaining checks whether the source is lower than Java 8 or JDBC 4.2. fix: throw SQLException for #getBoolean BIT(\u003e1) PR #2386 Throw SQLException instead of ClassCastException when calling CallableStatement#getBoolean(int) on BIT(\u003e1). style: import java.time types in more classes PR #2382 Use imports for java.time types in all remaining classes. style: import java.time types in TimestampUtils PR #2380 Use imports for java.time types in TimestampUtils. refactor: Change internal constructors to pass only connection Properties Changes internal constructors for PgConnection and related classes to only accept the connection properties object and remove the user and password arguments. Any locations that required those fields can retrieve them from the properties map. test: Fix DatabaseMetadataTest to perform mview tests only on 9.3+ perf: read in_hot_standby GUC on connection PR #2334 doc: improv doc around binary decoding of numeric data #2331 Add cert key type checking to chooseClientAlias PR #2417  Added     feat: Add authenticationPluginClassName option to provide passwords at runtime Adds authenticationPluginClassName connection property that allows end users to specify a class that will provide the connection passwords at runtime. Users implementing that interface must ensure that each invocation of the method provides a new char[] array as the contents will be filled with zeroes by the driver after use. Call sites within the driver have been updated to use the char[] directly wherever possible. This includes direct usage in the GSS authentication code paths that internally were already converting the String password into a char[] for internal usage. This allows configuring a connection with a password that must be generated on the fly or periodically changes. PR #2369 original issue Issue #2102 feat: add tcpNoDelay option PR #2341 fixes Issue #2324 feat: pg_service.conf and .pgpass support (jdbc:postgresql://?service=my-service) PR #2260 fixes Issue #2278  Fixed     Use local TimestampUtil in PgStatement and PgResultset for thread safety PR #2291 fixes Issue #921 synchronize modification of shared calendar fix: PgObject isNull() was reporting the opposite fixes Issue #2411 PR #2414 fix: default file name is “.pg_service.conf” on Windows (not “pg_service.conf”) PR #2398 fixes Issue #2278 test: Fix RefCursorFetchTest on older platforms fix: do not close refcursor after reading if fetchsize has been set fixes Issue #2227 PR #2371 fix: rework gss authentication to use the principal name to get the credentials fixes Issue #2235 PR #2352 fix: return getIndexInfo metadata columns in UPPER CASE PR #2368 fix: Connection leak in ConnectionFactoryImpl#tryConnect PR #2350 Issue #2351 fix: Fix For IS_AUTOGENERATED Flag PR #2348 fix: parsing service file tests for windows PR #2347 fix: The spec says that calling close() on a closed connection is a noop. PR #2345 fixes Issue #2300 fix: add microsecond precision to getTimestamp() called on sql TIME(6) Currently, “when fetching a value of type TIME(6) through resultSet.getTimestamp() only ms precision is retained, the microsecond fractional digits are lost.” This change will retain the microsecond precision when .getTimestamp() is called on TIME(6). PR #2181 Closes Issue #1537 test: materialized view privileges PR #2209 add and drop a materialized view Add to TestUtil and also to DatabaseMetaData setup and teardown fixes Issue #2060 fix: typo in connect.md PR #2338 OutOfMemoryException =\u003e OutOfMemoryError fix: use local TimestampUtil in PgStatement and PgResultset for thread safety TimestampUtil is not thread safe. It raises exceptions when multiple threads use ResultSets of one connection. PR #2291 fixes Issue #921 If PgStatement and PgResultSet use their own TimestampUtil no synchronize is needed. fix: typo in CONTRIBUTING.md PR #2332 seccion =\u003e section  Commits by author    Andrei Paikin (1):\n minor: fix checkstyle violations for empty lines in enum PR 2426  Brett Okken (1):\n doc: improv doc around binary decoding of numeric data PR 2331  Dave Cramer (21):\n move comment to appropriate place and add explanation PR 2336 bump version in readme and gradle.properties PR 2335 add entries for latest changes PR 2339 Ms goodman time gettimestamp micros PR 2181 add TCP No Delay option fixes Issue PR 2324 (#2341) fix Issue PR 2300. The spec says that calling close() on a closed connection is a noop. (#2345) fix: parsing service file tests for windows PR 2347 fix: return getIndexInfo metadata columns in UPPER CASE PR 2368 fix: rework gss authentication to use the principal name to get the credentials fixes Issue PR 2235 (#2352) Removed unsafe package and native kerberos ticket check PR 2363 log4jmessage PR 2370 Put back GSSCallbackHandler. Avoid using forbidden api PR 2373 fix: do not close refcursor after reading if fetchsize has been set fixes ISSUE PR 2227 (#2371) perf: add read(b, o, l) to BlobInputStream PR 2376 change the default directory returned on windows to APPDATA/postgresql since that is what we end up using anyway PR 2402 fix: we will ask the server if it supports GSS Encryption if gssEncryption is prefer or require PR 2396 docs: Document timezone reversal from POSIX to ISO PR 2413 fix: PgObject isNull() was reporting the opposite fixes Issue PR 2411 (#2414) remove skipjre6 and skipjre7 PR 2415 Revert “perf: add read(b, o, l) to BlobInputStream PR 2376” (#2422) Changelog42.3.2 PR 2418  JoelRabinovitch (1):\n fixForIsAutoGenerated Fix For IS_AUTOGENERATED Flag PR 2348  Marek Läll (2):\n Issue 2278 ; jdbc:postgresql://?service= ; pg_service.conf ; .pgpass PR 2282 fix: default file name is “.pg_service.conf” on Windows (not “pg_service.conf”) PR 2398  Mark Grobaker (1):\n test: materialized view privileges PR 2209  Michał Wyrzykowski (1):\n fix: Connection leak in ConnectionFactoryImpl#tryConnect PR 2350 (#2351)  Nick Burgan (1):\n Add cert key type checking to chooseClientAlias PR 2417  Philippe Marschall (6):\n style: fix typos in pgobject javadoc PR 2379 style: import java.time types in TimestampUtils PR 2380 style: import java.time types in more classes PR 2382 fix: throw SQLException for #getBoolean BIT(\u003e1) PR 2386 style: remove Java 8 / JDBC 4.2 checks PR 2383 docs: remove Java 6 and 7 references from contributing PR 2385  Sehrope Sarkuni (9):\n feat: Change AuthenticationPlugin interface to use char[] rather than String PR 2420 test: Disable no-arg callable statement tests in simple query mode PR 2419 test: Remove extra catch-fail in RefCursorFetchTest PR 2391 test: Fix RefCursorFetchTest on older platforms PR 2391 feat: Add authenticationPluginClassName option to provide passwords at runtime PR 2369 test: Add TestUtil.assumeHaveMinimumServerVersion(…) helper PR 2369 refactor: Change internal constructors to pass only connection Properties PR 2369 refactor: Use multi-catch for exceptions in ConnectionFactoryImpl PR 2369 test: Fix DatabaseMetadataTest to perform mview tests only on 9.3+ PR 2340  Sergey Nuyanzin (4):\n [typo] typo in CONTRIBUTING.md PR 2332 [typo] in connect.md PR 2338 Misprint in messages_ru.java PR 2358  Sergey Prytkov (1):\n perf: read in_hot_standby GUC on connection PR 2334  Zuzana Miklankova (1):\n docs: add info about convenience maven project PR 2407  marcmuel (1):\n fix: use local TimestampUtil in PgStatement and PgResultset for thread safety PR 2291  Contributors to this release    We thank the following people for their contributions to this release.\nPavel Raiskup\nSehrope Sarkuni\nAndrei Paikin\nNick Burgan\nZuzana Miklankova\nMarek Läll\nPhilippe Marschall\nSergey Nuyanzin\nMichał Wyrzykowski\nJoelRabinovitch\nMark Grobaker\nSergey Prytkov\nmarcmuel\nBrett Okken\n","description":"","title":"PostgreSQL JDBC Driver 42.3.2 Released","uri":"/pgjdbc/changelogs/2022-02-01-42.3.2-release/"},{"categories":null,"content":"CVE-2021-44228 status    The pgjdbc team is has reviewed the project and determined that the PostgreSQL JDBC driver is not effected by this CVE. The project has very few runtime dependencies and log4j is not one of them, therefore it does not expose the project to this security issue.\nThe pgjdbc team\n","description":"","title":"PostgreSQL JDBC Driver Log4j CVE status","uri":"/pgjdbc/changelogs/2021-12-22-log4j/"},{"categories":null,"content":"Changed     improv: Arrays in Object[] PR 2330 when an Object[] contains other arrays, treat as though it were a multi-dimensional array the one exception is byte[], which is not supported. improv: Use jre utf-8 decoding PR 2317 Remove use of custom utf-8 decoding. perf: improve performance of bytea string decoding PR 2320 improve the parsing of bytea hex encoded string by making a lookup table for each of the valid ascii code points to the 4 bit numeric value feat: intern/canonicalize common strings PR 2234  Added    Fixed     numeric binary decode for even 10 thousands PR #2327 fixes Issue 2326 binary numeric values which represented integers multiples of 10, 000 from 10, 000-9, 990, 000 were not decoded correctly [typo] typo in certdir/README.md PR #2309 certificatess =\u003e certificates [typo] typo in TimestampUtils.java PR #2314 Change Greagorian to Gregorian. remove check for negative pid in cancel request. Apparently pgbouncer can send one fixes Issue 2317 PR #2319  Commits by author    Brett Okken (6):\n improv: Arrays in Object[] PR 2230 538c79f5 improv: Use jre utf-8 decoding PR 2317 a5786037 perf: improve performance of bytea string decoding PR 2320 f2a24d37 feat: intern/canonicalize common strings PR 2234 a024cd51 fix: numeric binary decode for even 10 thousands PR 2327 b3050e60 fix: remove unused OptimizedUTF8Encoder PR 2329 515ea066  Dave Cramer (5):\n Update debezium.yml 84f1057d update release date to Oct 18 PR 2308 5fc1976d remove check for negative pid in cancel request. Apparently pgbouncer can send one fixes Issue PR 2318 (#2319) c9be5c0f move version to 42.3.0 PR 2322 1b8629b2 Remove references to JAVA 6 and 7 PR 2312 67113020  Sergey Nuyanzin (1):\n [typo] typo in certdir/README.md PR 2309 e5e36bd3  吴伟杰 (1):\n Fix typo in TimestampUtils.java PR 2314 4293a790  Contributors to this release    We thank the following people for their contributions to this release.\nBrett Okken\nDave Cramer\nSergey Nuyanzin\n吴伟杰\n","description":"","title":"PostgreSQL JDBC Driver 42.3.1 Released","uri":"/pgjdbc/changelogs/2021-10-29-42.3.1-release/"},{"categories":null,"content":"Changed     No longer build for Java 6 or Java 7 If assumeMinServerVersion is not defined and server is at least 9.0, group startup statements into a single transaction PR #1977  Added    Fixed     Rework OSGi bundle activator so it does not rely on exception message to check DataSourceFactory presence PR #507 Fix database metadata getFunctions() and getProcedures() to ignore search_path when no schema pattern is specified PR #2174 Fix refreshRow made the row readOnly. PR #2195 Fixes Issue #2193 Fix do not add double quotes to identifiers already double quoted PR #2224 Fixes Issue #2223 Add a property QUOTE_RETURNING_IDENTIFIERS which determines if we put double quotes around identifiers that are provided in the returning array. Fix Provide useful error message for empty or missing passwords for SCRAM auth PR #2290 fixes Issue #2288  Contributors to this release    We thank the following people for their contributions to this release.\nAbhishek-kumar09\nadrklos\nAgata Naomichi\nAndrew Dunstan\nBrett Okken\ncosta100\nDave Cramer\nDavid Rader\nEric Peterson\nFeng zhihao\nFrode Carlsen\nHugo Abreu\niceback\nJeremy Mailen\nJesper Pedersen\nJorge Solorzano\nJorge Solórzano\nJuha Syrjälä\nJY Cr\nLaurenz Albe\nMichael Ernst\nMMeent\nodubaj\nPavel Bludov\nPeter Eisentraut\nplan3d\nPower\nrtrier\nSehrope Sarkuni\nSimon Strassl\nTom Aizenberg\nVladimir Sitnikov\nVyom Yadav\nxpoinsard\n","description":"","title":"PostgreSQL JDBC Driver 42.3.0 Released","uri":"/pgjdbc/changelogs/2021-10-18-42.3.0-release/"},{"categories":null,"content":"Fixed     Fix startup regressions caused by PR #1949. Instead of checking all types by OID, we can return types for well known types PR #2257 Backport PR #2148 Avoid leaking server error details through BatchUpdateException when logServerErrorDetail PR #2254 Backpatch PR #2247 QueryExecutorImpl.receiveFastpathResult did not properly handle ParameterStatus messages. This in turn caused failures for some LargeObjectManager operations. Closes Issue #2237 Fixed by adding the missing code path, based on the existing handling in processResults. PR #2253 Backpatch PR #2242 PgDatabaseMetaData.getIndexInfo() cast operands to smallint PR#2253 It is possible to break method PgDatabaseMetaData.getIndexInfo() by adding certain custom operators. This PR fixes it. Backpatching PR #2251 into 42.2 Clean up open connections to fix test failures on omni and appveyor use older syntax for COMMENT ON FUNCTION with explicit no-arg parameter parentheses as it is required on server versions before v10. Handle cleanup of connection creation in StatementTest, handle cleanup of privileged connection in DatabaseMetaDataTest Backpatch PR #2245 fixes case where duplicate tables are returned if there are duplicate descriptions oids are not guaranteed to be unique in the catalog PR #2248 Change to updatable result set to use correctly primary or unique keys PR #2228 fixes issues introduced in PR #2199 closes Issue #2196 Fix NPE calling getTypeInfo when alias is null PR #2220 Backpatch PR #2217 to fix Issue #2215. OIDs are unsigned integers and were not being handled correctly when they exceeded the size of signed integers  Commits by author    Dave Cramer (7):\n fix: backpatch PRPR 2217 to fix issue #2215. (#2218) be1d4aa0 fix: NPE calling getTypeInfo when alias is null PR 2220 77c7d94e remove old changelog information from post. Incorrectly added by development script that is clearly still in development PR 2240 a70834e8 backpatch prPR 2245 fixes case where duplicate tables are returned if there are duplicate descriptions oids are not guaranteed to be unique in the catalog (#2248) f4928cee backpatch PRPR 2247 (#2249) 7bf89c8b fix startup regressions caused by PR PR 1949. Instead of checking all types by OID, we can return types for well known types (#2257) 88cfccab Bump version to 42.2.24 and update changelog 233c5181  Jens Peters (1):\n Backport PR2148 into 42.2.x PR 2254 2917c1f2  Juha Syrjälä (1):\n PgDatabaseMetaData.getIndexInfo() cast operands to smallint PR 2242 (#2253) 33af6a78  Sehrope Sarkuni (3):\n test: Fix database metadata to handle older versions for function comment bb1f7285 test: Handle cleanup of connection creation in StatementTest 1c5f5271 test: Handle cleanup of privileged connection in DatabaseMetaDataTest 5c6041b4  chalmagr (1):\n Fix updateable result set when there are primary keys and unique keys PR 2228 c596587a  Contributors to this release    We thank the following people for their contributions to this release.\nchalmagr\nDave Cramer\nJens Peters\nJuha Syrjälä\nSehrope Sarkuni\n","description":"","title":"PostgreSQL JDBC Driver 42.2.24 Released","uri":"/pgjdbc/changelogs/2021-09-22-42.2.24-release/"},{"categories":null,"content":"Changed     renewed the SSL keys for testing  Fixed     getColumnPrecision for Numeric when scale and precision not specified now returns 0 instead of 131089 fixes: Issue #2188 Calling refreshRow on an updateable resultset made the row readOnly. Fixes Issue #2193 results should be updateable if there is a unique index available PR#2199 Fixes Issue #2196 Rework sql type gathering to use OID instead of typname. This does not have the issue of name shadowing / qual-names, and has the added benefit of fixing #1948.  Commits by author    Dave Cramer (2):\n fix: back patch results should be updateable PR#2199 test: Regenerate TLS certs with new expirations (#2201) backpatch PR 1949 (#2206) Rework sql type gathering to use OID instead of typname. ","description":"","title":"PostgreSQL JDBC Driver 42.2.23 Released","uri":"/pgjdbc/changelogs/2021-07-06-42.2.23-release/"},{"categories":null,"content":"Fixed     Regression caused by https://github.com/pgjdbc/pgjdbc/commit/4fa2d5bc1ed8c0086a3a197fc1c28f7173d53cac. Unfortunately due to the blocking nature of the driver and issues with seeing if there is a byte available on a blocking stream when it is encrypted this introduces unacceptable delays in returning from peek(). At this time there is no simple solution to this.  Commits by author    Dave Cramer (1):\n","description":"","title":"PostgreSQL JDBC Driver 42.2.22 Released","uri":"/pgjdbc/changelogs/2021-06-16-42.2.22-release/"},{"categories":null,"content":"Changed     update docs to reflect deprecated DataSource API setServerName backpatch PR#2057 PR #2105  Added    Fixed     make sure the table has defined primary keys when using updateable resultset backpatch PR#2101 fixes Issue 1975 PR #2106 backpatch PR #2143 read notifies or errors that come in asynchronously after the ready for query PR #2168 backpatch PR #507 which reworks OSGI bundle activator fixes ISSUE #2133 Fix database metadata getFunctions() and getProcedures() to ignore search_path when no schema pattern is specified. backpatch PR #2174 fixes Issue 2173  Commits by author    Dave Cramer (5):\n  fix: make sure the table have defined primary keys when using updateable resultset PR 2101 (#2106) update docs to reflect deprecated DataSource API setServerName PR 2057 (#2105)\n  fix: backpatch PRPR 507 which reworks OSGI bundle activator fixes ISSUE #2133 (#2166)\n  fix: backpatch2142 read notifies or errors that come in asynchronously after the ready for query PR 2168\n  fix: backpatch PRPR 2174 to Fix metadata functions getProcedures() and getFunctions() to ignore search_path (#2175)\n ","description":"","title":"PostgreSQL JDBC Driver 42.2.21 Released","uri":"/pgjdbc/changelogs/2021-06-10-42.2.21-release/"},{"categories":null,"content":"Changed    Added    Fixed      fix: Partitioned indexes were not found fixes #2078 PR #2087\n  isValid() timeout should not be blocked #1943 Cherry-picked #2076 The usage of setQueryTimeout(); with the same value as the setNetworkTimeout(); is blocking the current transaction timeout. The timeouts are blocking each other with this approach.\n  DatabaseMetaData.getTables returns columns in UPPER case as per the spec PR #2092 fixes Issue #830\n  Commits by author    Dave Cramer (10):\n move comments to correct location [PR 2070](https://github.com/pgjdbc/pgjdbc/pull/2070 Update Changelog to reflect changes in 42.2.19 [PR 2063](https://github.com/pgjdbc/pgjdbc/pull/2063 fix: Partitioned indexes were not found fixes [PR 2078](https://github.com/pgjdbc/pgjdbc/pull/2078 (#2087) cherry-pick PR [PR 2092](https://github.com/pgjdbc/pgjdbc/pull/2092 PgDatabaseMetaData.getTables() should return UPPERCASE column names as per spec (#2104)  Hugo Abreu (1):\n isValid() timeout should not be blocked [PR 1943](https://github.com/pgjdbc/pgjdbc/pull/1943 (#2076) ","description":"","title":"PostgreSQL JDBC Driver 42.2.20 Released","uri":"/pgjdbc/changelogs/2021-04-19-42.2.20-release/"},{"categories":null,"content":"Changed     Now the driver uses SASLprep normalization for SCRAM authentication fixing some issues with spaces in passwords. Fix: Actually close unclosed results. Previously was not closing the first unclosed result fixes #1903 (#1905) There is a small behaviour change here as a result. If closeOnCompletion is called on an existing statement and the statement is executed a second time it will fail.  Added     Verify code via forbidden-apis (jdk-internal and jdk-non-portable signatures) PR #2012  Fixed     Fix: properly set cancel socket timeout (#2044) Fix “Required class information missing” when old org.jboss:jandex parses pgjdbc classes [issue 2008][https://github.com/pgjdbc/pgjdbc/issues/2008] Fix PGCopyInputStream returning the last row twice when reading with CopyOut API [issue 2016][https://github.com/pgjdbc/pgjdbc/issues/2016] Fix Connnection.isValid() to not wait longer than existing network timeout PR #2040 Fix Passwords with spaces (ASCII and non-ASCII) now work with SCRAM authentication (driver now uses SASLprep normalization) PR #2052 Fix DatabaseMetaData.getTablePrivileges() to include views, materialized views, and foreign tables PR #2049  Commits by author    Dave Cramer (5):\n remove gssEncMode to test default in tests, should default to allow now PR 1927 013ba273 Fixsite release42.2 PR 2032 9fcfd76e chore: More42.2 site fixes PR 2035 411f39d6 fix: Actually close unclosed results. Previously was not closing the first unclosed result fixes PR 1903 (#1905) fc25aebc  Jeremy Mailen (3):\n fix: return metadata privileges for views and foreign tables 66690817 refactor: consolidate repeated drop code in TestUtil f5abc65c test: Add test for ACLs returned from metadata getTablePrivileges() for views a6cf67d2  Jorge Solórzano (1):\n fix: Use SASLprep normalization for SCRAM authentication PR 2052 b4800044  Pavel Bludov (2):\n chore: javadoc changes in PgResultSet.java to pass upcoming checkstyle version 70471c25 chore: javadoc changes in Driver.java to pass upcoming checkstyle version c57ac5eb  Power (1):\n fix: isValid() should not wait longer than network timeout 0dbc6078  Roman Kozlov (1):\n fix: properly set cancel socket timeout PR 2044 e551d1a6  Sehrope Sarkuni (5):\n test: Add tests for broken PGCopyInputStream.readFromCopy() c6794f09 fix: Fix last row duplicated in PGCopyInputStream.readFromCopy() 6c296a52 test: Add TestUtils.closeQuietly(…) c152f7f0 test: Add StrangeProxyServer 8f773a15 docs: Add getTablePrivileges() fix to changelog 444cb1b1  Vladimir Sitnikov (14):\n chore: make javadoc optional for building from a reduced-pom.xml 736eb70d chore: make buildSrc.jar reproducible ff0774da chore: use cleanup-gradle-cache for Travis cache cleanup 0e0ae208 fix: allow specifying binaryTransferEnable even for those types that are not enabled by default ed5891e3 fix: binary transfer for numeric PR 1935 a4173079 chore: update Gradle 6.3 -\u003e 6.7.1 PR 2011 dbb12e41 chore: verify code via forbidden-apis (jdk-internal and jdk-non-portable signatures) 991a9c0b chore: add org.postgresql.util.internal. Unsafe for forbidden-apis suppressions 6e3be122 fix: “Required class information missing” when old org.jboss:jandex parses pgjdbc classes (PR PR 2010 2df6c97b test: set gssEncMode only in case it is not already present in Properties 97f6abd1 test: temporarily allow CONNECTION_UNABLE_TO_CONNECT in SslTest for bad client certificates 5f584cd4 perf: avoid duplicate PGStream#changeSocket calls b7e70d85 chore: cancel stale workflows in GitHub Actions CI d255bd21 doc: update README link from travis-ci.org to travis-ci.com 1bd679e8  odubaj (1):\n Remove dependency on java-comment-preprocesor df2297ef  rtrier (1):\n Fix resolve ParseError in PGtokenizer fixes PR 2050 9d6ab68e  Contributors to this release    We thank the following people for their contributions to this release.\nDave Cramer\nJeremy Mailen\nJorge Solórzano\nodubaj\nPavel Bludov\nPower\nRoman Kozlov\nrtrier\nSehrope Sarkuni\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.19 Released","uri":"/pgjdbc/changelogs/2021-02-18-42.2.19-release/"},{"categories":null,"content":"Fixed     Unfortunately changing the default of gssEncMode to ALLOW was not enough. The GSSEncMode Enum was not changed as well fixed in #1920  Commits by author    Contributors to this release    We thank the following people for their contributions to this release.\n","description":"","title":"PostgreSQL JDBC Driver 42.2.18 Released","uri":"/pgjdbc/changelogs/2020-10-15-42.2.18-release/"},{"categories":null,"content":"Changed     Change default of gssEncMode to ALLOW. PostgreSQL can deal with PREFER but there are cloud providers that did not implement the protocol properly. Libpq gets around this by checking for a GSS credential cache before attempting the connection. This is possible in JDK 8 and up, but not JDK6, or JDK7 fixes Issue #1868 PR #1913  Added     Add smallserial metadata [PR #899(https://github.com/pgjdbc/pgjdbc/pull/899)  Fixed     Avoid NullPointerException when receiving PGbox, PGcircle, PGline, PGlseg, PGpath, PGpoint, PGpolygon, and PGmoney [PR 1873] (https://github.com/pgjdbc/pgjdbc/pull/1873).. The driver returns enum and jsonb arrays elements as String objects (like in 42.2.14 and earlier versions) PR 1879. PgTokenizer was ignoring last empty token PR #1882 Remove osgi from karaf fixes Issue #1891 PR #1902  Commits by author    Dave Cramer (5):\n fix: PgTokenizer was ignoring last empty token PR 1882 a6e83342 fix checkstyle PR 1888 70b02c55 fix: handle smallserial correctly fixes PR 1897 (#1899) d4a4b2d6 fix:remove osgi from karaf fixes Issue PR 1891 (#1902) 0c2858e9 Change default of gssEncMode to ALLOW. PostgreSQL can deal with PREFER but there are cloud providers that did not implement the protocol properly 14c4173c  Jorge Solorzano (1):\n feat: add smallserial metadata PR 899 05403bd0  Vladimir Sitnikov (8):\n fix: handle nulls when the following clasess are used: PGbox, PGcircle, PGline, PGlseg, PGpath, PGpoint, PGpolygon, and PGmoney c745f4e5 chore: fix compileJava7 and compileJava6 0308ffca chore: run GitHub actions when branch name has slash 433817d6 chore: seed build cache only when credentials exist (==skip on forks) eec708a8 test: add GitHub CI for testing source distribution 44d0923f test: add tests for enum, json, and jsonb array 1bec4022 fix: make enum, json, and jsonb array result classes to be the same as 42.2.14 and earlier PR 1876 41855018 fix: avoid removal type annotations on “this” so the source archive is buildable 832bf21c  Contributors to this release    We thank the following people for their contributions to this release.\nDave Cramer\nJorge Solorzano\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.17 Released","uri":"/pgjdbc/changelogs/2020-10-09-42.2.17-release/"},{"categories":null,"content":"Known issues     The driver returns enum and jsonb arrays elements are returned as PGobject instances (fixed in 42.2.17)  Fixed     Arrays sent in binary format are now sent as 1 based. This was a regression for multi-dimensional arrays as well as text/varchar, oid and bytea arrays. Since 42.2.0 single dimensional arrays were stored 0 based. They are now sent 1 based which is the SQL standard, and the default for Postgres when sent as strings such as ‘{1, 2, 3}’. Fixes issue 1860 in PR 1863.  Commits by author    Brett Okken (3):\n Binary array index PR 1863 a0babeb3 fix: preserve unquoted unicode whitespace in array literals PR 1266 e8923c71  Dave Cramer (3):\n move fix to correct place and remove duplicate PR 1859 ffd428f1  Sehrope Sarkuni (1):\n fix: Remove unused .ratignore PR 1857 aa4cb6d8  Vladimir Sitnikov (3):\n  docs: add release notes for 42.2.15 PR 1858 0c162bc0 draderaws (1):\n  Fix header on existing Parameter Status doc page, and include entry in the index html page. PR 1845 99623077\n  Contributors to this release    We thank the following people for their contributions to this release.\nBrett Okken\nDave Cramer\ndraderaws\nSehrope Sarkuni\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.16 Released","uri":"/pgjdbc/changelogs/2020-08-20-42.2.16-release/"},{"categories":null,"content":"Known issues     The driver returns enum and jsonb arrays elements are returned as PGobject instances (fixed in 42.2.17)  Changed     Rename source distribution archive to postgresql-$version-jdbc-src.tar.gz, and add top-level archive folder ba017507 Add the ability to connect with a GSSAPI encrypted connection. As of PostgreSQL version 12 GSSAPI encrypted connections are possible. Now the driver will attempt to connect to the server with a GSSAPI encrypted connection. If that fails then attempt an SSL connection, finally falling back to a plain text connection. All of this is controlled using both the gssEncMode and sslMode parameters which, in concert with pg_hba.conf, determine if a particular mode is allowed and or required. PR 1821 ad921b9e Source release archive shades dependencies (scram) by default. It affects only postgresql-version-src.tar.gz release artifact f0301eb9 Refactor decoding arrays PR 1194 0fd09396  Added     Verify nullness with CheckerFramework 6e524ae5  Fixed     Avoid preparedStatement leak when using updateable ResultSet via insert/update/refreshRow PR 1815 9a0d2b18 Change order of checks for oid vs primary keys. OID’s have been deprecated. PR 1613 Close certificate file stream. PR 1837 a40052c9 Make sure socketTimeout is enforced PR 1831 210b27a6 Assume PKCS-8 SSL key format by default PR 1819 80d4ed34 Preserve unquoted unicode whitespace in array literals PR 1266  Commits by author    Brett Okken (1):\n Refactor decoding arrays PR 1194 0fd09396  Dave Cramer (12):\n use jdk8 PR 1806 b86a7c32 fix: replication test we were not waiting for the view to be updated PR 1805 ba84ddd3 fix up readonlyMode docs PR 1807 796bd4e2 remove old directories PR 1809 1a0991c5 remove old links PR 1810 1ed7dd8e fix: New PGStream constructor which copies settings from old pgstream PR 1811 7b49a694 fix: remove code borrowed from apache cxf project PR 1813 a1980237 Gssapi encrypted PR 1821 ad921b9e use connection encoding instead of hard coding ISO-8859-1 PR 1833 de239cc0 Fix: change order of checks for oid vs primary keys. Fixes PR 1613 (#1839) 08507f8e try java14 PR 1844 148ecb58 update docs into the next century PR 1770 5801e321  Eduardo Souza (1):\n Closing certificate file stream. PR 1837 a40052c9  Mike Noordermeer (1):\n fix: make sure socketTimeout is enforced PR 1831 210b27a6  Vladimir Sitnikov (18):\n chore: configure method parameter wrapping in IntelliJ via editorconfig aa70d2f4 fix: avoid NPE when initializing SingleCertValidatingFactory with classpath resource and contextclassloader is null 0b7575a9 fix: avoid preparedStatement leak when using updateable ResultSet via insert/update/refreshRow PR 1815 9a0d2b18 chore: rename source distribution archive to postgresql-$version-jdbc-src.tar.gz, add top-level archive folder ba017507 chore: fix style in pgjbc/build.gradle.kts 44b12472 chore: move testgss to main.yml to avoid duplicate CI groups in GitHub Actions PR 1824 6d4dc763 tests: add gssEncMode to SslTest PR 1823 08bfc033 chore: add checkerframework for nullness verification 6e524ae5 doc: add null safety documentation to CONTRIBUTING.md 2ba3028e refactor: add nullness annotations 529e5dc3 test: reduce stdout verbosity of CopyLargeFileTest aa190cce chore: add S3 Gradle build cache 67155873 chore: collect Gradle Build Scan from CI jobs 8b3bf922 fix: nullability annotations for LruCache/Gettable/GettableHashMap 34cd4f93 chore: enable local build cache, and use burrunan/gradle-cache-action@v1 for GitHub Actions caching 3802b453 chore: shade dependencies when building from the source archive f0301eb9 fix: use Assertions#assertThrows instead of Assert#assertThrows to keep the code junit 4.12 compatible 075bd102 docs: update the current version in readme.md e901ff74  azraino (1):\n docs: change readOnlyMode on connect.md documentation PR 1784 19a835a4  pip25 (2):\n fix: assume PKCS-8 SSL key format by default PR 1819 (#1832) 80d4ed34 docs: touch up SSL keyfile documentation PR 1836 2c5517af  Contributors to this release    We thank the following people for their contributions to this release.\nazraino\nBrett Okken\nDave Cramer\nEduardo Souza\nMike Noordermeer\npip25\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.15 Released","uri":"/pgjdbc/changelogs/2020-08-14-42.2.15-release/"},{"categories":null,"content":"Changed     Reverted com.github.waffle:waffle-jna, org.osgi:org.osgi.core, org.osgi:org.osgi.enterprise dependencies to optional=true in Maven PR 1797.  Commits by author    Dave Cramer (1):\n fix release notes for 42.2.13 ecbc48ff  Sehrope Sarkuni (1):\n Fix some changelog formatting and add link to XXE fix PR 1794 98a9bdca  Vladimir Sitnikov (2):\n chore: bump release-plugins from 1.65 to 1.70 PR 1798 826270d9 chore: add Gradle features for sspi and osgi PR 1795 049d9fe6  Contributors to this release    We thank the following people for their contributions to this release.\nDave Cramer\nSehrope Sarkuni\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.14 Released","uri":"/pgjdbc/changelogs/2020-06-10-42.2.14-release/"},{"categories":null,"content":"The primary reason to release this version and to continue the 42.2.x branch is for CVE-2020-13692. Reported by David Dworken this is an XXE and more information can be found here Sehrope Sarkuni reworked the XML parsing to provide a solution in commit 14b62aca4 The build system has been changed to Gradle thanks to Vladimir PR 1627 Regression: com.github.waffle:waffle-jna, org.osgi:org.osgi.core, org.osgi:org.osgi.enterprise dependencies are listed as non-optional issue 1975.\nAdded     jre-6 was added back to allow us to release fixes for all artifacts in the 42.2.x branch PR 1787  Fixed     I/O error ru translation PR 1756 Issue 1771 PgDatabaseMetaData.getFunctions() returns procedures fixed in PR 1774 getTypeMap() returning null PR 1781 Updated openssl example command PR 1763 fix documentation with ordered list to be displayed correctly PR 1783  Commits by author    Andrei Arkaev (1):\n Fix I/O error message in ru translation PR 1756 f6731dfc  Benjamin van der Veen (1):\n Updated openssl example command PR 1763 e19d4587  Dave Cramer (6):\n remove 9.4 and 9.5 PR 1753 2aa49c05 Update issue templates PR 1765 139eb54e refer to current versions in maven PR 1769 302046f2 fix: getTypeMap() returning null PR 1781 f3abb4eb create changelog and prepare release PR 1790 bb3c5ca8 change release date to june 4 PR 1792 e63584cf  ItaiFonio (1):\n docs: remove Supported Versions from downloads page PR 1761 5e97af32  Jean-Christophe Arnu (1):\n fix numbered list to be displayed correctly PR 1783 fda4299e  Kim Johan Andersson (1):\n Use generatedKeys to fetch sequence values on insertRow() PR 1743 9f398c53  Sehrope Sarkuni (2):\n fix: Update checkstyle command in PR template to reference gradle PR 1780 4ddbcb7d Merge pull request from GHSA-37xm-4h3m-5w3v 14b62aca  Vladimir Sitnikov (14):\n chore: migrate build scripts to Gradle 9f396707 Add source distribution d2e4f585 Re-add benchmarks module 409bd25a Fix comparisons in travis_build.sh b80ebcef Configure core.autocrlf in AppVeyor cb370106 Inline COPY_ERROR_MESSAGE so it can be localized properly 9a0dbf1b chore: update po files with the current messages bb36e362 chore: make benchmarks executable from IDEA 99ba94ec chore: move code style verification to GitHub Actions job 9da29740 chore: show the current PostgreSQL HEAD commit id in Travis log 332b0719 chore: re-add pgjdbc-jre6 build PR 1787 d224acd0 chore: use REL$buildVersion for the release version as it was previously 148840d3 chore: fix artifactid and version for -jre6 and -jre7 artifacts 97e2e8f5 chore: include META-INF/services/java.sql. Driver for jre7 and jre6 jars 5ca2b9e7  kili668 (1):\n Fix: issue PgDatabaseMetaData.getFunctions() PR 1774 0eb5eea9  Contributors to this release    We thank the following people for their contributions to this release.\nAndrei Arkaev\nBenjamin van der Veen\nDave Cramer\nItaiFonio\nJean-Christophe Arnu\nkili668\nKim Johan Andersson\nSehrope Sarkuni\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.13 Released","uri":"/pgjdbc/changelogs/2020-06-04-42.2.13-release/"},{"categories":null,"content":"Changed     reverted PR 1729 throw an error instead of silently rolling back a commit error. This change introduced a breaking change which will be moved to 42.3.0 reverted PR 1719 add support for full names of data types (#1719)  Commits by author    Christian Ramseyer (1):\n Remove merge aritfacts and fix a typo PR 1741 3871bfd8  Dave Cramer (1):\n Revert “fix: convert silent rollbacks into exception if application sends commit command PR 1729” (#1746) 14576f4b  Vladimir Sitnikov (1):\n Revert “fix: add support for full names of data types PR 1719” 49d66e4e  Contributors to this release    We thank the following people for their contributions to this release.\nChristian Ramseyer\nDave Cramer\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.12 Released","uri":"/pgjdbc/changelogs/2020-03-31-42.2.12-release/"},{"categories":null,"content":"We have released 42.2.12 to correct regressions in this version: Specifically\n PR 1729 was reverted as this is a breaking change PR 1719 has been reverted as it introduced errors in the PgType Cache  We recommend that this version 42.2.11 not be used.\nChanged     Reverted PR 1641. The driver will now wait for EOF when sending cancel signals. DatabaseMetaData#getProcedures returns only procedures (not functions) for PostgreSQL 11+ PR 1723 Convert silent rollbacks into exception if application sends commit or xa.prepare command PR 1729  Added     Convert silent rollbacks into exception if application sends commit or xa.prepare command PR 1729 feat: Expose ByteStreamWriter in CopyManager PR 1702 feat: add way to distinguish base and partitioned tables in PgDatabaseMetaData.getTables PR 1708 refactor: introduce tuple abstraction (rebased) PR 1701 refactor: make PSQLState enum consts for integrity constraint violations PR 1699 test: add makefile to create ssl certs PR 1706  Fixed     fix: Always use . as decimal separator in PGInterval PR 1705 fix: allow DatabaseMetaData.getColumns to describe an unset scale PR 1716  Commits by author    Dave Cramer (4):\n remove the user of the word master internally PR 1713 9a3e0f0c Revert “feat: implementation of adaptive fetching PR 1707” (#1717) 13a644b4 document copy out not closing output stream PR 1721 0faf9ce2 Update changelog for 42.2.11 PR 1720  Lőrinc Pap (2):\n refactor: introduce tuple abstraction (rebased) PR 1701 ed09fd11 Expose ByteStreamWriter in CopyManager PR 1702 1e4f4758  Magnus Reftel (1):\n docs: document SocketFactory(Properties) PR 1696 8a8e8ff0  Markus Winand (1):\n Typo in documentation (case instead of cast) PR 1715 630692d6  Mike Goodman (4):\n refactor: make PSQLState enum consts for integrity constraint violations PR 1699 cc31c13f feat: add way to distinguish base and partitioned tables in PgDatabaseMetaData.getTables PR 1708 25eb32c8 fix: add support for full names of data types PR 1719 f554118a fix: getProcedures returns only procedures (not functions) for psql11+ PR 1723 5fbe0462  Nick Mancuso (1):\n perf: upgrade maven-checkstyle-plugin to 3.1.1 PR 1726 7da60074  Sehrope Sarkuni (2):\n fix: Correct sort order of PGProperty. ASSUME_MIN_SERVER_VERSION 3ea08125 test: Add test to check sort order of PGProperty values aa1b93f1  Toddy69 (1):\n fix: Always use . as decimal separator in PGInterval. PR 1705 94641ef0  Vladimir Sitnikov (11):\n test: skip PKCS12KeyTest when enable_ssl_tests is not set 6730f3fe test: add makefile for creating test certificates 202f88e1 Revert “fix: remove receiving EOF from backend after cancel since according to protocol the server closes the connection once cancel is sent (connection reset exception is always thrown) PR 1641” ca1f60ff Revert “fix unstable test. Originally this would loop creating many statements, now it should timeout properly PR 1650” 5eabe1ae style: compute nanoseconds with TimeUnit. SECONDS.toNanos b004c706 revert: use simple executor.shutdown() in testFastCloses fc5467c6 Move CopyBothResponseTest to replication folder 2509b663 doc: fix HTML5 errors in javadoc 161ea249 fix: convert silent rollbacks into exception if application sends commit command PR 1729 adcb194e chore: add continuation_indent_size = 4 to .editorconfig for *.java 45d5831e chore: remove end_of_line = lf from .editorconfig for .java 7ce254d2  adrklos (1):\n (reverted) feat: implementation of adaptive fetching PR 1707 5bb5f409  crwr45 (1):\n fix: allow DatabaseMetaData.getColumns to describe an unset scale PR 1716 30843e45  Contributors to this release    We thank the following people for their contributions to this release.\nadrklos\ncrwr45\nDave Cramer\nLőrinc Pap\nMagnus Reftel\nMarkus Winand\nMike Goodman\nNick Mancuso\nSehrope Sarkuni\nToddy69\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.11 Released","uri":"/pgjdbc/changelogs/2020-03-10-42.2.11-release/"},{"categories":null,"content":"Changed     (!) Regression: remove receiving EOF from backend after cancel PR 1641. The regression is that the subsequent query might receive the cancel signal.  Added     Add maxResultBuffer property PR 1657 add caller push of binary data (rebase of #953) PR 1659  Fixed     Cleanup PGProperty, sort values, and add some missing to docs PR 1686 Fixing LocalTime rounding (losing precision) PR 1570 Network Performance of PgDatabaseMetaData.getTypeInfo() method PR 1668 Issue #1680 updating a boolean field requires special handling to set it to t or f instead of true or false PR 1682 bug in pgstream for replication PR 1681 Issue #1677 NumberFormatException when fetching PGInterval with small value PR 1678 Metadata queries improvements with large schemas. PR 1673 Utf 8 encoding optimizations PR 1444 interval overflow PR 1658 Issue #1482 where the port was being added to the GSSAPI service name PR 1651 remove receiving EOF from backend after cancel since according to protocol the server closes the connection once cancel is sent (connection reset exception is always thrown) PR 1641 Unable to register out parameter Issue #1646 PR 1648  [42.2.9] (2019-12-06)    Changed    Added     read only transactions PR 1252 pkcs12 key functionality PR 1599 new “escapeSyntaxCallMode” connection property PR 1560 connection property to limit server error detail in exception exceptions PR 1579 cancelQuery() to PGConnection public interface PR 1157 support for large update counts (JDBC 4.2) PR 935 Add Binary Support for Oid. NUMERIC and Oid. NUMERIC_ARRAY PR 1636  Fixed     issue 716 getTypeInfo() may not return data in the order specified in Oracle documentation PR 1506 PgSQLXML setCharacterStream() results in null value PR 1608 get correct column length for simple domains PR 1605 NPE as a result of calling executeQuery twice on a statement fixes issue #684 [PR 1610] (https://github.com/pgjdbc/pgjdbc/pull/1610) handle numeric domain types PR 1611 pginterval to take iso8601 strings PR 1612 remove currentTimeMillis from code, tests are OK PR 1617 NPE when calling setNull on a PreparedStatement with no parameters PR 1620 allow OUT parameter registration when using CallableStatement native CALL PR 1561 add release save point into execute with batch PR 1583 Prevent use of extended query protocol for BEGIN before COPY PR 1639  Commits by author    Brett Okken (2):\n feat: read only transactions PR 1252 05079793 Utf 8 encoding optimizations PR 1444 c84e62ef  Craig Ringer (1):\n Prevent use of extended query protocol for BEGIN before COPY PR 1639 b3711537  Dave Cramer (33):\n Add simple test to make sure we can load a key PR 1588 7c591262 Update prepare.md PR 1601 5e48eaa4 fix: issue 716 getTypeInfo() may not return data in the order specified in Oracle documentation PR 1506 9b8a3ffd chore: Document how to use unix domain sockets. PR 1607 e64b0a2d fix: PgSQLXML setCharacterStream() results in null value PR 1608 1e370263 add test for table name with values in it PR 1609 47f756fa fix: get correct column length for simple domains PR 1605 8abf3161 fix: NPE as a result of calling executeQuery twice on a statement fixes issue PR 684 (#1610) 00fa4485 fix:handle numeric domain types PR 1611 7f1752a1 add checks for null results PR 1616 69320c7a fix: pginterval to take iso8601 strings PR 1612 7b454355 fix: remove currentTimeMillis from code, tests are OK PR 1617 ff4a66d2 fix: NPE when calling setNull on a PreparedStatement with no parameters PR 1620 6899a43d doc: correct documentation about last applied message fixes PR 760 (#1621) fdf898c7 docs: fix documentation about oids PR 1624 4edca517 fix: javadoc requires throws annotation PR 1625 4258e0d0 fix: Add pkcs12 key functionality PR 1599 82c2008f Actually test cleanSavePoints PR 1509 97d32caa fix: DatabaseMetaData.getFunctions should not limit the search to the search_path if the schema is provided PR 1633 8106d3df feat: WIP Filter DatabaseMetaData using privileges for the user PR 1630 ec76bace new pr for release notes PR 1640 fa69e7e9 Update 03fdf75d use TestUtil to find path of certdir PR 1643 4a8a8544 fix: Unable to register out parameter Issue PR 1646 (#1648) ea2ca87c remove more currentTimeMillis in order to get tests to be more reliable PR 1647 617f0487 fix unstable test. Originally this would loop creating many statements, now it should timeout properly PR 1650 aaccf431 fix: issue 1482 where the port was being added to the GSSAPI service name PR 1651 f7a55cf9 Update README to reflect version 42.2.9 2972add8 be explicit about which JDK PR 1672 39c73a6a fix: actually use milliseconds instead of microseconds for timeouts PR 1653 3dd5dff2 fix: Issue PR 1680 updating a boolean field requires special handling to set it to t or f instead of true or false (#1682) c266b088 add DatabaseMetaDataCacheTest to test suite to run it PR 1685 b21f474c fix: Fixes issue PR 1592 where one thread is reading the copy and another thread closes the connection (#1594) 1191076c  Dongming (1):\n Adjust the default port to 5432. PR 1619 9a193de7  Frane Roje (1):\n Fixing LocalTime rounding (losing precision) PR 1570 a7480d20  GregN (2):\n feat: add new “escapeSyntaxCallMode” connection property PR 1560 d7559138 fix: allow OUT parameter registration when using CallableStatement native CALL PR 1561 ed74670f  Igor Volkov (1):\n Fix exception on PGCopyOutputStream.close() after endCopy() PR 1574 (#1575) 539a0925  IvyDev0 (1):\n fix: null pointer exception from PgResultSetMetaData when there’s no column metadata PR 1615 08bd46bf  Jorge Solorzano (1):\n feat: support for large update counts (JDBC 4.2) PR 935 0888e935  Knut Wannheden (1):\n Fix Markdown formatting issue PR 1576 69edc0b8  Lőrinc Pap (1):\n feat: add caller push of binary data (rebase of PR 953 (#1659) db228a4f  Mahmoud Bahaa (4):\n Add Binary Support for Oid. NUMERIC and Oid. NUMERIC_ARRAY PR 1636 c85b149d Only allow binary transfer for those Oids that the pgjdbc currently supports PR 1637 ad83cb33 Fix test case by changing executeQuery to execute PR 1642 1d47c3cc fix: remove receiving EOF from backend after cancel since according to protocol the server closes the connection once cancel is sent (connection reset exception is always thrown) PR 1641 23cce8ad  Michail Nikolaev (1):\n fix: do ssl handshake after socket timeout and buffer size settings PR 1584 e39a0be0  Pavel Raiskup (1):\n rpm: drop BR on properties-maven-plugin 91186c08  Roman Ivanov (1):\n minor: fix checkstyle violation of unused import PR 1683 2ea7311e  Russell Briggs (1):\n Fix Network Performance of PgDatabaseMetaData.getTypeInfo() method PR 1668 beb354eb  Sehrope Sarkuni (7):\n Clean up some tests and fix IsValidTest race condition PR 1581 ad734574 Fix test suite order PR 1593 003ea835 fix: Update error message for COPY commands executed using JDBC API PR 1300 c99ed121 Add connection property to limit server error detail in exception exceptions PR 1579 cd0b555c feat: Add cancelQuery() to PGConnection public interface PR 1157 f0af538f Add disallow multiple empty lines PR 1427 be5c9f43 Cleanup PGProperty, sort values, and add some missing to docs PR 1686 47e366dd  Svein Baardsen (1):\n fix: PR 1677 NumberFormatException when fetching PGInterval with small value (#1678) e38868b2  Tom Eicher (1):\n fix: DataSources broken by connection failover urls PR 1039 (#1457) bd9485ef  Torsten Brodbeck (1):\n fix camel case writing of ‘cleanupSavepoints’ PR 1587 0fd45353  Vladimir Sitnikov (1):\n style: use fixed checkstyle version so the build does not depend on user machine d164cba2  Yuriy Yudin (1):\n fix: add release save point into execute with batch PR 1583 504bb316  Zhenlei Huang (2):\n style: prepare for upcoming Checkstyle release 8.28 PR 1654 0b60c626 chore: upgrade checkstyle to 8.28 PR 1660 63316802  adrklos (1):\n feat: Add maxResultBuffer property PR 1657 557e2de4  bjanczak (1):\n Metadata queries improvements. PR 1673 c574147a  draderaws (2):\n Stored procedure with transaction control test case and doc. PR 1645 d10ab8d6 sync error message value with tested value PR 1664 91d422d6  hyunkshinft (1):\n fix testSetNetworkTimeoutEnforcement test failure PR 1681 799e78d5  reibitto (1):\n Fix interval overflow PR 1658 a44ab4be  rnveach (1):\n upgrade maven-checkstyle-plugin to 3.1.0 PR 1573 831115c1  Árpád Magosányi (2):\n fix documentation on generating the pk8 key. closes: PR 1585 (#1586) 635cc865 security notice and clarifications on choosing the right cipher suite for client key PR 1591 c67b0b0b  Contributors to this release    We thank the following people for their contributions to this release.\nadrklos\nÁrpád Magosányi\nbjanczak\nBrett Okken\nCraig Ringer\nDave Cramer\nDongming\ndraderaws\nFrane Roje\nGregN\nhyunkshinft\nIgor Volkov\nIvyDev0\nJorge Solorzano\nKnut Wannheden\nLőrinc Pap\nMahmoud Bahaa\nMichail Nikolaev\nPavel Raiskup\nreibitto rnveach\nRoman Ivanov\nRussell Briggs\nSehrope Sarkuni\nSvein Baardsen\nTom Eicher\nTorsten Brodbeck\nVladimir Sitnikov\nYuriy Yudin\nZhenlei Huang\n","description":"","title":"PostgreSQL JDBC Driver 42.2.10 Released","uri":"/pgjdbc/changelogs/2020-01-30-42.2.10-release/"},{"categories":null,"content":"Changed    Added     read only transactions PR 1252 pkcs12 key functionality PR 1599 new “escapeSyntaxCallMode” connection property PR 1560 connection property to limit server error detail in exception exceptions PR 1579 cancelQuery() to PGConnection public interface PR 1157 support for large update counts (JDBC 4.2) PR 935 Add Binary Support for Oid. NUMERIC and Oid. NUMERIC_ARRAY PR 1636  Fixed     issue 716 getTypeInfo() may not return data in the order specified in Oracle documentation PR 1506 PgSQLXML setCharacterStream() results in null value PR 1608 get correct column length for simple domains PR 1605 NPE as a result of calling executeQuery twice on a statement fixes issue #684 [PR 1610] (https://github.com/pgjdbc/pgjdbc/pull/1610) handle numeric domain types PR 1611 pginterval to take iso8601 strings PR 1612 remove currentTimeMillis from code, tests are OK PR 1617 NPE when calling setNull on a PreparedStatement with no parameters PR 1620 allow OUT parameter registration when using CallableStatement native CALL PR 1561 add release save point into execute with batch PR 1583 Prevent use of extended query protocol for BEGIN before COPY PR 1639  Brett Okken (1):\n feat: read only transactions PR 1252 05079793  Craig Ringer (1):\n Prevent use of extended query protocol for BEGIN before COPY PR 1639 b3711537  Dave Cramer (20):\n Add simple test to make sure we can load a key PR 1588 7c591262 Update prepare.md PR 1601 5e48eaa4 fix: issue 716 getTypeInfo() may not return data in the order specified in Oracle documentation PR 1506 9b8a3ffd chore: Document how to use unix domain sockets. PR 1607 e64b0a2d fix: PgSQLXML setCharacterStream() results in null value PR 1608 1e370263 add test for table name with values in it PR 1609 47f756fa fix: get correct column length for simple domains PR 1605 8abf3161 fix: NPE as a result of calling executeQuery twice on a statement fixes issue PR 684 (#1610) 00fa4485 fix:handle numeric domain types PR 1611 7f1752a1 add checks for null results PR 1616 69320c7a fix: pginterval to take iso8601 strings PR 1612 7b454355 fix: remove currentTimeMillis from code, tests are OK PR 1617 ff4a66d2 fix: NPE when calling setNull on a PreparedStatement with no parameters PR 1620 6899a43d doc: correct documentation about last applied message fixes PR 760 (#1621) fdf898c7 docs: fix documentation about oids PR 1624 4edca517 fix: javadoc requires throws annotation PR 1625 4258e0d0 fix: Add pkcs12 key functionality PR 1599 82c2008f Actually test cleanSavePoints PR 1509 97d32caa fix: DatabaseMetaData.getFunctions should not limit the search to the search_path if the schema is provided PR 1633 8106d3df feat: WIP Filter DatabaseMetaData using privileges for the user PR 1630 ec76bace  Dongming (1):\n Adjust the default port to 5432. PR 1619 9a193de7  GregN (2):\n feat: add new “escapeSyntaxCallMode” connection property PR 1560 d7559138 fix: allow OUT parameter registration when using CallableStatement native CALL PR 1561 ed74670f  Igor Volkov (1):\n Fix exception on PGCopyOutputStream.close() after endCopy() PR 1574 (#1575) 539a0925  IvyDev0 (1):\n fix: null pointer exception from PgResultSetMetaData when there’s no column metadata PR 1615 08bd46bf  Jorge Solorzano (1):\n feat: support for large update counts (JDBC 4.2) PR 935 0888e935  Knut Wannheden (1):\n Fix Markdown formatting issue PR 1576 69edc0b8  Mahmoud Bahaa (2):\n Add Binary Support for Oid. NUMERIC and Oid. NUMERIC_ARRAY PR 1636 c85b149d Only allow binary transfer for those Oids that the pgjdbc currently supports PR 1637 ad83cb33  Michail Nikolaev (1):\n fix: do ssl handshake after socket timeout and buffer size settings PR 1584 e39a0be0  Pavel Raiskup (1):\n rpm: drop BR on properties-maven-plugin 91186c08  Sehrope Sarkuni (5):\n Clean up some tests and fix IsValidTest race condition PR 1581 ad734574 Fix test suite order PR 1593 003ea835 fix: Update error message for COPY commands executed using JDBC API PR 1300 c99ed121 Add connection property to limit server error detail in exception exceptions PR 1579 cd0b555c feat: Add cancelQuery() to PGConnection public interface PR 1157 f0af538f  Tom Eicher (1):\n fix: DataSources broken by connection failover urls PR 1039 (#1457) bd9485ef  Torsten Brodbeck (1):\n fix camel case writing of ‘cleanupSavepoints’ PR 1587 0fd45353  Yuriy Yudin (1):\n fix: add release save point into execute with batch PR 1583 504bb316  rnveach (1):\n upgrade maven-checkstyle-plugin to 3.1.0 PR 1573 831115c1  Árpád Magosányi (2):\n fix documentation on generating the pk8 key. closes: PR 1585 (#1586) 635cc865 security notice and clarifications on choosing the right cipher suite for client key PR 1591 c67b0b0b  Contributors to this release    We thank the following people for their contributions to this release.\nÁrpád Magosányi\nBrett Okken\nCraig Ringer\nDave Cramer\nDongming\nGregN\nIgor Volkov\nIvyDev0\nJorge Solorzano\nKnut Wannheden\nMahmoud Bahaa\nMichail Nikolaev\nPavel Raiskup\nrnveach\nSehrope Sarkuni\nTom Eicher\nTorsten Brodbeck\nYuriy Yudin\n","description":"","title":"PostgreSQL JDBC Driver 42.2.9 Released","uri":"/pgjdbc/changelogs/2019-12-06-42.2.9-release/"},{"categories":null,"content":"Changed    Added    Fixed    Commits by author    Sehrope Sarkuni (1):\n fix: Revert inet default Java type to PGObject and handle values with net masks PR 1568 3df32f9  Contributors to this release    We thank the following people for their contributions to this release.\nDave Cramer\nSehrope Sarkuni\n","description":"","title":"PostgreSQL JDBC Driver 42.2.8 Released","uri":"/pgjdbc/changelogs/2019-09-13-42.2.8-release/"},{"categories":null,"content":"Changed    Added     Expose parameter status messages (GUC_REPORT) to the user PR 1435 Add automatic module name to manifest for jdk9+ PR 1538 Log ignoring rollback when no transaction in progress PR 1549 Map inet type to InetAddress PR 1527 issue 1134  Fixed     fix issue 1547 As long as peek returns some bytes do not reset the timeout, this allows us to continue checking until any async notifies are consumed PR 1548 fix: issue 1466 In logical decoding the if the backend was requesting a reply we… PR 1467 fix: issue 1534 Proleptic java.time support PR 1539 fix Ensure isValid() will not last more than timeout seconds PR 1557  Commits by author    Adrien (1):\n Ensure isValid() will not last more than timeout seconds PR 1557 b2eaefe  Craig Ringer (2):\n Expose parameter status messages (GUC_REPORT) to the user PR 1435 ce8333a Make ConnectTimeout test accept NoRouteToHostException PR 1526 08d8129  Dave Cramer (8):\n note that waffle 1.9.x is only supported in jre8 version Update README to point to new maven coordinates 58804e9 add automatic module name to manifest for jdk9+ PR 1538 0600990 fix issue 1547, as long as peek returns some bytes do not reset the timeout, this allows us to continue checking until any async notifies are consumed PR 1548 36a75cb fix: In logical decoding the if the backend was requesting a reply we… PR 1467 f89e62c Log ignoring rollback when no transaction in progress PR 1549 bda74d7 fix assertion message PR 1553 ba82948 remove failing tests for PostgreSQL version 8.3 add in tests for 11 89464a5 Fix travis parsing issue 634ac7d  Hajar Razip (2):\n docs: add note on behavior of ResultSet.getString() PR 1286 (#1528) c30556c docs: update resultset.md in head to reflect 94 PR 1528 (#1536) fc8efc9  Matteo Melli (1):\n Updated scram to version 2.0 PR 1532 fcbbc3e  Myo Wai Thant (1):\n Issue 1134 Map inet type to InetAddress PR 1527 1d0c477  Pavel Raiskup (2):\n fix parent version in pgjdbc/pom.xml as well 3db55da rpm: remove karaf plugin 8495127  Philippe Marschall (1):\n fix: proleptic java.time support PR 1539 60fa6d3  Sehrope Sarkuni (2):\n docs: Add note to GitHub PR templates about test suites PR 1531 51f3d0b Sort test suites and enable missed tests PR 1530 aa8778d  Steinar Bang (1):\n Add an apache karaf feature for the PostgreSQL JDBC driver to fix PR 1552 (#1554) e2f6e9f  Tim Ward (1):\n Check that JDBC Connections that are closed by the server do not report as valid PR 1533 56399ef  Vsevolod Kaimashnikov (1):\n Add more info about currentSchema property. PR 1481 d96ed59  Contributors to this release    We thank the following people for their contributions to this release.\nAdrien\nCraig Ringer\nDave Cramer\nHajar Razip\nMatteo Melli\nMyo Wai Thant\nPavel Raiskup\nPhilippe Marschall\nSehrope Sarkuni\nSteinar Bang\nTim Ward\nVsevolod Kaimashnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.7 Released","uri":"/pgjdbc/changelogs/2019-09-10-42.2.7-release/"},{"categories":null,"content":"Known issues     Waffle has dropped support for 1.6, 1.7 as such the new waffle 1.9.x is only available in jre8 Microseconds in timestamps might be truncated when transferred in binary mode 24:00 time handling is not consistent issue 1385 Unexpected packet type during stream replication issue 1466 Driver goes missing after OSGi bundle restart issue 1476  Changed     Change IS_GENERATED to IS_GENERATEDCOLUMN as per spec PR 1485 Fix missing metadata columns, and misspelled columns in PgDatabaseMetaData#getTables PR 1323  Added     CI tests with Java 11, and Java EA Support temporary replication slots in ReplicationCreateSlotBuilder PR 1306 Support PostgreSQL 11, 12 Return function (PostgreSQL 11) columns in PgDatabaseMetaData#getFunctionColumns Return information on create replication slot, now the snapshot_name is exported to allow a consistent snapshot in some uses cases. PR 1335  Fixed     Fixed async copy performance (1ms per op) in SSL mode PR 1314 Return Double. NaN for ‘NaN’::numeric PR 1304 Performance issue in PgDatabaseMetaData#getTypeInfo with lots of types in DB PR 1302 PGCopyInputStream#read should cap values to [0, 255], -1 PR 1349 Fixes LocalDateTime handling of BC dates PR 1388 Release savepoints in autosave mode to prevent out of shared memory errors at the server side PR 1409 Fix execution with big decimal in simple query mode. PR 1463 Fix rounding for timestamps truncated to dates before 1970 PR 1502  Commits by author    Adam Brusselback (1):\n Add method alias’s for each property which didn’t use the conventiona… PR 1436 0efcf81c  AlexElin (6):\n chore: add .editorconfig PR 1410 61cc2756 style: enable checkstyle modules for name checking PR 1411 6b124a05 test: add tests for Driver and PgConnection PR 1402 7b52b0c9 chore: add EmptyStatement checkstyle rule PR 1400 4cd3f05a chore: add StaticVariableName checkstyle rule PR 1414 ddb38e57 chore: enable AtclauseOrder checkstyle rule PR 1417 7ae1e833  Andrew Guibert (1):\n Fix inconsistent javadoc for setDefaultAutoCommit PR 1472 fac5e09c  Craig Ringer (2):\n fix: NPE in PGXAConnection$ConnectionHandler.invoke() of .equals(null) PR 1365 cea5231b Update waffle-jna to new artifact coordinates PR 1383 72dc692e  Dave Cramer (31):\n docs: update README.md for SSL tests 1fff6043 Update mailinglist.html 556c93d3 chore: add jdk11 and jdk12-ea tests to travis b53eedf6 fix: autosave being overwritten in BaseDataSource by setUrl PR 1309 10201f61 perf: ignore tables for PgDatabaseMetaData.getTypeInfo PR 1302 e44e4e89 Update issue_template.md f3ade07d Remove tests that use oids fixes PR 1347 (#1348) da4d6577 Fix setURL in BaseDataSource PR 1341 2ad1ac3f Add support for version 11 and version 12 PR 1332 7f0e200a fix missing metadata columns, and misspelled columns PR 1323 0ed0e8f2 fix: Incorrect return value for bytes [128-255] in stream.read PR 1349 325e63b4 fix: as of v12 recovery.conf is no longer used for standby recovery. … PR 1355 c4656b32 Update pull_request_template.md PR 1367 be23262b Update README.md 2a639fd6 Fix formatting c0f6b9bd Update README.md PR 1404 65f7ea6f add matrix including master to test PR 1408 5965f399 Fix:save points causing server to run out of resources PR 1409 af8f8836 use postgres column type name in error message PR 1422 fe7eda3d fix: Test Case HostSpecTest , tests testShouldResolveWithEmptySocksProxyHost and testShouldResolveWithWhiteSpaceSocksProxyHost PR 1424 0c5cf475 Update checkstyle to 8.18 PR 1447 ed5f750b fix javadoc for defaultAutoCommit to default to true PR 1465 0a4f078e autocommit true turns on autocommit by default 31bc6e59 remove reference to unknown google group PR 1429 129960ea Update backend_protocol_v4_wanted_features.md 95ba7b26 some fixbugs cleanup PR 1486 8bd9062f change IS_GENERATED to IS_GENERATEDCOLUMN as per spec PR 1485 17c4bcfb undo part of fixbugs pull request that set returned NULL mistakenly PR 1489 27b8fcae fix: Error messages cannot be formatted PR 1492 12ef697a fix PR 1499 rounding for timestamps truncated to dates before 1970 (#1502) c9a70782 Fix maven coordinates PR 1479 45ce14fd  Dmitriy Tseyler (1):\n fix: return Double. NaN for ‘NaN’::numeric PR 1304 265f22b2  Doug Mayer (1):\n Add core type delimiters into cache for array type OIDs. PR 1416 6a0960a6  Harry Chan (1):\n Optimize toArray PR 1395 (#1396) 2341623b  Ivan Leskin (1):\n Support custom ‘options’ connection property PR 1356 7be21fc3  Jorge Solorzano (2):\n feat: return info on create slot of replication PR 1335 84e8d90b test: fix misspelled secondaryPort2 build property PR 1284 2c0f692b  Kamal Kumlien (1):\n docs: cosmetic fixes on sample settings PR 1379 d0453b75  Kevin Wooten (1):\n Fixes LocalDateTime handling of BC dates PR 1388 ebada4af  Krzysztof Szafrański (1):\n Fix logging level PR 1446 f8c112cb  Marc Dean (1):\n Add DEADLOCK_DETECTED Enumeration PR 1380 a7f63bff  Mark Nguyen (1):\n docs: Add DEM format details for sslkey PR 1376 10945e34  Mykola Nikishov (2):\n Fix link to Test Suite Howto PR 1369 33ac76d1 refactor: remove unused method encode3to4 from Base64 PR 1370 bac4bc1a  Nikolai Ivanov (1):\n fix: improper relative cursor movement PR 1462 b6ab27c1  Philip Sanetra (1):\n feat: Extend ReplicationCreateSlotBuilder DSL to support temporary replications slots PR 1306 d514ceb5  Sehrope Sarkuni (4):\n Fix TestUtil.dropXyz(…) object not exists errors PR 1359 0999bb78 refactor: Clean up loading of reading of keydata file in LazyKeyManager PR 1372 9b45e709 Fix metadata test to use explicit PK/FK names PR 1442 42d6bfa5 Cleanup encoding PR 1441 73ec8173  Sualeh Fatehi (2):\n Fix: getFunctionColumns used to return ProcedureColumns, now returns function columns b8a86807 Update testing documents, and point to jackdb/pgjdbc-test-vm PR 1363 2a715a98  Tyson Andre (1):\n docs: Fix typos in docs detected by codespell PR 1361 5b0c05fb  Vladimir Sitnikov (9):\n docs: reflect 42.2.5 release in readme.md d43398a5 perf: fix 1ms per async CopyAPI (regression since 42.2.5) PR 1314 e2623d63 chore: use openjdk7 to boostrap Travis CI images for JDK 6 PR 1366 cdfd49cf test: avoid locale-dependent output in SetObject310Test ef14ceae fix: date rounding errors for dates before 1970 b5653899 docs: update translation files 9fcaa98e fix: temporary make LibPQFactory. ConsoleCallbackHandler public 95d8da60 Update pgjdbc-parent-poms to 1.1.6 to use updated waffle-jna f0a297db Update changelog for 42.2.6 8944fa67  itchyny (1):\n docs: fix link to pull request 1052 in 42.2.3 changelog PR 1345 9f248e12  jajalvipul (1):\n Added break statement to avoid the additional iterations in for loop PR 1406 6b13f7b7  kaiwangchen (1):\n Fix execution with big decimal in simple query mode. PR 1463 8e47a303  kazachka (2):\n style: remove extra empty lines PR 1452 5e48c4d0 style: remove extra empty lines PR 1454 cb466d1b  maltalex (1):\n Make LogSequenceNumber implement Comparable PR 1494 1970c4a3  pbillen (1):\n Allow setFlushedLSN(lsn) and setAppliedLSN(lsn) from outside main loop PR 1329 381cf45c  rnveach (1):\n fix: improper indentation for javadoc PR 1434 35df0dde  Contributors to this release    We thank the following people for their contributions to this release.\nAdam Brusselback\nAlexElin\nAndrew Guibert\nCraig Ringer\nDave Cramer\nDmitriy Tseyler\nDoug Mayer\nHarry Chan\nitchyny\nIvan Leskin\njajalvipul\nJorge Solorzano\nkaiwangchen\nKamal Kumlien\nkazachka\nKevin Wooten\nKrzysztof Szafrański\nmaltalex\nMarc Dean\nMark Nguyen\nMykola Nikishov\nNikolai Ivanov\npbillen\nPhilip Sanetra\nrnveach\nSehrope Sarkuni\nSualeh Fatehi\nTyson Andre\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.6 Released","uri":"/pgjdbc/changelogs/2019-06-19-42.2.6-release/"},{"categories":null,"content":"Known issues     1ms per async copy call issue 1312  Changed     ssl=true implies sslmode=verify-full, that is it requires valid server certificate cdeeaca4  Added     Support for sslmode=allow/prefer/require cdeeaca4  Fixed     Security: added server hostname verification for non-default SSL factories in sslmode=verify-full (CVE-2018-10936) cdeeaca4 Updated documentation on SSL configuration fa032732 Updated Japanese translations PR 1275 IndexOutOfBounds on prepared multistatement with insert values c2885dd0  Commits by author    Christoph Berg (1):\n chore: remove editor backup files PR 1255 b1b1afb8  Dave Cramer (4):\n Update Contributing.md 1f8ac406 Add issue templates PR 1263 c66bf710 move issue template and pull request template into github specific di… PR 1283 b5c19af6 docs: improve documentation on SSL fa032732  Kazuhiro Sera (1):\n docs: fix typos detected by github.com/client9/misspell PR 1287 9534e9ca  Kyotaro Horiguchi (1):\n fix: Japanese translation PR 1275 993a3beb  Sehrope Sarkuni (1):\n fix: Correct typo in CopyManager comment PR 1285 203a106d  Vladimir Sitnikov (12):\n reflect 42.2.4 release in readme.md b99cea0d doc: add SQL_TSI to the known issues for 42.2.3 [ci-skip] 2da319a0 docs: escape underscores in changelog otherwise it produces italic b1507f84 docs: typo in 42.2.3 changelog “minute-\u003esecond” 5898cdf1 refactor: remove unused PgPreparedStatement.adjustIndex PR 1253 178eecc9 test: run testShortQueryTimeout in PG_VERSION=HEAD Travis job only PR 1270 ecd412e4 fix: remove POT-Creation-Date from generated .po and .pot files PR 1269 450a496b fix: use UTF-8 encoding in generated translation/messages_*.java files 2cbe7b35 fix: typo in “One ore more ClientInfo failed” error message [ci skip] 21e126f4 fix: IndexOutOfBounds on prepared multistatement with insert values PR 1289 c2885dd0 security: implement SSL hostname verification for non-default (LibPQFactory) SSL factories (CVE-2018-10936) cdeeaca4 Update changelog for 42.2.5 237a89bf  Contributors to this release    We thank the following people for their contributions to this release.\nChristoph Berg\nDave Cramer\nKazuhiro Sera\nKyotaro Horiguchi\nSehrope Sarkuni\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.5 Released","uri":"/pgjdbc/changelogs/2018-08-27-42.2.5-release/"},{"categories":null,"content":"Changed     PreparedStatement.setNull(int parameterIndex, int t, String typeName) no longer ignores the typeName argument if it is not null PR 1160  Fixed     Fix treatment of SQL_TSI_YEAR, SQL_TSI_WEEK, SQL_TSI_MINUTE PR 1250 Map integrity constraint violation to XA_RBINTEGRITY instead of XAER_RMFAIL PR 1175 f2d1352c  Commits by author    Christian Kotzbauer (1):\n Fixed typo in CHANGELOG.md PR 1249 b20df919  Dave Cramer (3):\n use the correct date for the release 985b63b7 also fix spelling of error b0162c0a fix: setNull for types not in java.sql. Types (e.g. uuid) PR 1160 6287c954  Jan Van den Bergh (1):\n fix: map integrity constraint violation to XA_RBINTEGRITY instead of XAER_RMFAIL PR 1175 f2d1352c  Pavel Raiskup (1):\n packaging: sync RPM spec with Fedora Rawhide cc545d28  Vladimir Sitnikov (2):\n docs: fix broken commit link in 42.2.3 changelog 776e1717 fix: treatment of SQL_TSI_YEAR, SQL_TSI_WEEK, SQL_TSI_MINUTE PR 1250 4668f43f  Contributors to this release    We thank the following people for their contributions to this release.\nChristian Kotzbauer\nDave Cramer\nJan Van den Bergh\nPavel Raiskup\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.4 Released","uri":"/pgjdbc/changelogs/2018-07-14-42.2.4-release/"},{"categories":null,"content":"Known issues     SQL_TSI_YEAR is treated as hour, SQL_TSI_WEEK is treated as hour, SQL_TSI_MINUTE is treated as second (fixed in 42.2.4)  Changed     Reduce the severity of the error log messages when an exception is re-thrown. The error will be thrown to caller to be dealt with so no need to log at this verbosity by pgjdbc PR 1187 Deprecate Fastpath API PR 903 Support parenthesis in {oj …} JDBC escape syntax PR 1204 ubenchmark module moved pgjdbc/benchmarks repository due to licensing issues PR 1215 Include section on how to submit a bug report in CONTRIBUTING.md PR 951  Fixed     getString for PGObject-based types returned “null” string instead of null PR 1154 Field metadata cache can be disabled via databaseMetadataCacheFields=0 PR 1052 Properly encode special symbols in passwords in BaseDataSource PR 1201 Adjust date, hour, minute, second when rounding nanosecond part of a timestamp PR 1212 perf: reduce memory allocations in query cache PR 1227 perf: reduce memory allocations in SQL parser PR 1230, PR 1233 Encode URL parameters in BaseDataSource PR 1201 Improve JavaDoc formatting PR 1236  AlBundy33 (1):\n fix: support parenthesis in {oj …} JDBC escape syntax PR 865 38356e68  AlexElin (3):\n refactor: deprecate Fastpath API PR 903 f8e21b63 refactor: migrate MultiHostsConnectionTest to JUnit4 PR 886 17a4d6a5 refactor: simplify PgConnection.java PR 1047 ba360f73  Dave Cramer (3):\n fixed spelling mistake in PostgreSQL PR 1202 b92bd65a docs: improve javadocs in PgResultSetMetaData PR 792 825c0924 minor language updates PR 1241 e19ee7ae  Hari Babu Kommi (2):\n spelling mistake correction PR 1181 e88abd79 fix: set the loggerName in ConnectionFactoryImpl.log PR 1188 f78a639d  Jesper Pedersen (1):\n perf: guard logging statements PR 1112 7a0b7d65  Jorge Solorzano (6):\n fix: error on Travis build head PR 1186 354d2857 test: add coverage for extendedCacheEverything PR 1062 f4d503c2 Update after_n_builds to 10 PR 1193 2f9fed45 test: drop OpenJ9 CI tests PR 1196 9b6506df fix: logger should be generally quiet PR 1187 30f06e14 docs: improve CONTRIBUTING.md PR 951 38c8845e  KimBisgaardDmi (1):\n fix: getString for PGObject columns returns null PR 1154 bbb6c1f8  Marc Slemko (1):\n fix: allow disabling field metadata cache PR 1052 6ce91721  Michele Mancioppi (1):\n docs: clarify database and username for the build PR 859 83f2e385  Pavel Raiskup (1):\n packaging: fix RPM build requirements 6bb72e69  Sidi Mohamed EL AATIFI (1):\n Fix typos in java8-date-time.md PR 1174 dde8c020  Stephen Nelson (2):\n chore: add missing javadoc tags to avoid warnings PR 1164 e9ced455 docs: correct the Javadoc and enforce with Checkstyle PR 1236 08631ccd  Vladimir Sitnikov (19):\n reflect 42.2.2 release in readme.md b1581e99 fix: avoid NPE in PgConnection.finalize PR 1206 03a1441b chore: update gettext plugin, sort po files eb5c8fdd chore: sort messages in *.po files 10fc2fbb chore: remove obsolete translations ed1eab9e doc: add Russian translation to “No IOException expected…” eaa0acad fix: adjust date, hour, minute, second when rounding timestamp PR 1212 4dc98be8 chore: remove ubenchmark module due to licensing issues PR 1215 88ec13bb chore: remove ubenchmark from packaging/rpm as well a699965a fix: support query timeouts exceeding 2147483 seconds (~25 days) PR 1224 b7fd9f3c perf: improve performance of replacing JDBC {…} escapes PR 1230 177f63be docs: use union merge strategy for CHANGELOG PR 1107 70189203 chore: use 5432 as default port when running code from IDE 5dc03f63 docs: use “PR 42” references instead of “PRPR 42” in the changelog (#1239) f4ae60ec test: close of replication connection has not been fixed at backend side, so disable the test till 12.1 PR 1243 481460a3 perf: avoid string allocation for oid/rows parsing in command tag PR 1232 da831de5 docs: prepare changelog for 42.2.3 release c5f5d8d2 chore: fetch contributors' URL via GitHub API d7297984 docs: update site for 42.2.3  bazzargh (1):\n fix: encode url query parameters DataSource PR 1201 9f3838f7  benbenw (2):\n refactor: remove obsolete outParmBeforeFunc PR 1234 71028532 perf: improve parsing performance of JDBC-style { call …} calls PR 1233 435e2f79  benoit (3):\n perf: reduce memory allocations when JDBC escapes ({fn …}) are used 2a1e0910 refactor: use singleArgumentFunctionCall in EscapedFunctions 191d84eb perf: avoid BaseQueryKey.toString in CachedQuery.getSize PR 1227 669fc31e  bpd0018 (1):\n style: rephrase comment on named portals PR 1129 86c46f94  Étienne BERSAC (1):\n docs: fix link to GitHub documentation PR 1191 655b6e70  Contributors to this release    We thank the following people for their contributions to this release.\nAlBundy33\nAlexElin\nbazzargh\nbenbenw\nbenoit\nbpd0018\nDave Cramer\nÉtienne BERSAC\nHari Babu Kommi\nJesper Pedersen\nJorge Solorzano\nKimBisgaardDmi\nMarc Slemko\nMichele Mancioppi\nPavel Raiskup\nSidi Mohamed EL AATIFI\nStephen Nelson\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.3 Released","uri":"/pgjdbc/changelogs/2018-07-12-42.2.3-release/"},{"categories":null,"content":"Added     Documentation on server-side prepared statements PR 1135  Fixed     Avoid failure for insert ... on conflict...update for reWriteBatchedInserts=true case PR 1130 fix: allowEncodingChanges should allow set client_encoding=… PR 1125 Wrong data from Blob/Clob when mark/reset is used PR 971 Adjust XAException return codes for better compatibility with XA specification PR 782 Wrong results when single statement is used with different bind typesPR 1137 Support generated keys for WITH queries that miss RETURNING PR 1138 Support generated keys when INSERT/UPDATE/DELETE keyword is followed by a comment PR 1138  Commits by author    Dave Cramer (5):\n Update java8-date-time.md 643e5583 Update about.html 6fe76a3c Update documentation.md 3b3fd8c9 Update documentation.md a8ef9f96 test: add Travis configuration to test SSL PR 1095 298683b1  Jorge Solorzano (1):\n fix: improve DatabaseMetaData.getSQLKeywords() PR 940 7a586b6e  Pawel (1):\n Fixes #1096 PR 1097 df4e7fa0  Selene Feigl (1):\n fix: wrong data from Blob/Clob when mark/reset is used PR 971 61e1c300  Simon Stelling (1):\n fix: handle Timestamp values with fractional seconds \u003c 1 microsecond correctly in PreparedStatement arguments PR 1119 8ff2a617  Vladimir Sitnikov (14):\n docs: reflect 42.2.1 release in readme.md 1a4256b9 chore: make sure TEST_CLIENTS performs regular tests as well aa676bb3 chore: remove unused variable lastKnownTime in ConnectionFactoryImpl 48b98971 fix: ArrayIndexOutOfBoundsException when using the same SQL for regular and updateable resultset PR 1123 45c32bc6 fix: support insert … on conflict…update for reWriteBatchedInserts=true PR 1130 1ca0c586 fix: allowEncodingChanges should allow set client_encoding=… PR 1125 af64ed2d tests: UUID vs setString test PR 1133 5827858b fix: UUID test for preferQueryMode=simple 44bb7f8d fix: wrong results when a single statement is used with UNSPECIFIED types PR 1137 fcd1ea14 test: workaround DST issue in StatementTest#testDateFunctions af499625 docs: improve documentation and tests for server-side prepared statements PR 1135 4204f094 test: make testAlternatingBindType Java 6-compatible PR 1139 bcdd4273 fix: better support for RETURNING for WITH queries and queries with comments PR 1138 04e76661 chore: add contributor links to release script 2568d38e  bpd0018 (3):\n docs: fix spelling and chapter, update sample code PR 1098 0cfffa84 style: spelling in comment PR 1121 cc219aa7 docs: fix JavaDoc for getPreferQueryMode() PR 1122 43d80cd4  chalda (1):\n Adjust XAException return codes for better compatibility with XA specification PR 782 e5aab1cd  trtrmitya (1):\n fix: use Locale. Category. DISPLAY (~lc_messages) when selecting resource bundle. PR 1115 0e9dfce4  Contributors to this release    We thank the following people for their contributions to this release.\nDave Cramer\nJorge Solorzano\nPawel\nSelene Feigl\nSimon Stelling\nVladimir Sitnikov\nbpd0018\nchalda\ntrtrmitya\n","description":"","title":"PostgreSQL JDBC Driver 42.2.2 Released","uri":"/pgjdbc/changelogs/2018-03-15-42.2.2-release/"},{"categories":null,"content":"Known issues     client_encoding has to be UTF8 even with allowEncodingChanges=true  Changed     socksProxyHost is ignored in case it contains empty string PR 1079  Fixed     Avoid connection failure when DateStyle is set to ISO (~PgBouncer) Issue 1080 Package scram:client classes, so SCRAM works when using a shaded jar PR 1091 1a89290e reWriteBatchedInserts=true causes syntax error with ON CONFLICT Issue 1045 PR 1082 Avoid failure in getPGArrayType when stringType=unspecified PR 1036  Commits by author    AlexElin (1):\n test: check if url is not for PostgreSQL PR 1077 fe463bce  Alexander Kjäll (1):\n feat: add support for fetching ‘TIMESTAMP(6) WITHOUT TIME ZONE’ as LocalDate to getObject() PR 1083 09af4b23  Dave Cramer (1):\n fix: package scram:client classes, so SCRAM works when using a shaded jar PR 1091 1a89290e  Ivan (2):\n chore: remove braces for LeftCurlyCheck checkstyle PR 1075 c2664b44 chore: remove additional braces for LeftCurlyCheck checkstyle PR 1076 975aaf5a  JCzogalla (1):\n Fixes issue #1078 PR 1079 0d51370b  Jamie Pullar (1):\n fix: getPGArrayType fails in when stringType=unspecified PR 1036 d5f1cf7c  Jorge Solorzano (1):\n Fix style changelog PR 1089 5ebd2090  Pavel Raiskup (1):\n packaging: update Fedora’s CI dcbf70bc  Vladimir Sitnikov (3):\n docs: reflect 42.2.0 release in readme.md 6d02e958 fix: avoid connection failure when DateStyle is set to ISO PR 1081 e442db1f fix: reWriteBatchedInserts=true causes syntax error with ON CONFLICT PR 1082 e133510e  Contributors to this release    We thank the following people for their contributions to this release.\nAlexElin\nAlexander Kjäll\nDave Cramer\nIvan\nJCzogalla\nJamie Pullar\nJorge Solorzano\nPavel Raiskup\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.1 Released","uri":"/pgjdbc/changelogs/2018-01-25-42.2.1-release/"},{"categories":null,"content":"Known issues     SCRAM authentication does not work as scram client classes are not packaged client_encoding has to be UTF8 even with allowEncodingChanges=true  Added     Support SCRAM-SHA-256 for PostgreSQL 10 in the JDBC 4.2 version (Java 8+) using the Ongres SCRAM library. PR 842 Make SELECT INTO and CREATE TABLE AS return row counts to the client in their command tags. Issue 958 PR 962 Support Subject Alternative Names for SSL connections. PR 952 Support isAutoIncrement metadata for PostgreSQL 10 IDENTITY column. PR 1004 Support for primitive arrays PR 887 3e0491a Implement support for get/setNetworkTimeout() in connections. PR 849 Make GSS JAAS login optional, add an option “jaasLogin” PR 922 see Connecting to the Database  Changed     Improve behaviour of ResultSet.getObject(int, Class). PR 932 Parse CommandComplete message using a regular expression, allows complete catch of server returned commands for INSERT, UPDATE, DELETE, SELECT, FETCH, MOVE, COPY and future commands. PR 962 Use ‘time with timezone’ and ‘timestamp with timezone’ as is and ignore the user provided Calendars, ‘time’ and ‘timestamp’ work as earlier except “00:00:00” now maps to 1970-01-01 and “24:00:00” uses the system provided Calendar ignoring the user-provided one PR 1053 Change behaviour of multihost connection. The new behaviour is to try all secondaries first before trying the master PR 844. Avoid reflective access to TimeZone.defaultTimeZone in Java 9+ PR 1002 fixes Issue 986  Fixed     Make warnings available as soon as they are received from the server. This is useful for long running queries, where it can be beneficial to know about a warning before the query completes. PR 857 Use 00:00:00 and 24:00:00 for LocalTime. MIN/MAX. PR 992 Now the DatabaseMetaData.getFunctions() implementation complies with the JDBC docs. PR 918 Execute autosave/rollback savepoint via simple queries always to prevent “statement S_xx not exists” when autosaving fixes Issue #955 Received resultset tuples, but no field structure for them\" when bind failure happens on 5th execution of a statement Issue 811  Removed     Drop support for the (insecure) crypt authentication method. PR 1026  Deprecated     Reintroduce Driver.getVersion for backward compatibility reasons, mark it as deprecated as application should not rely on it (regression since 42.0.0) 50d5dd3e slave and preferSlave values for the targetServerType connection property have been deprecated in favour of secondary and preferSecondary respectively.  AlexElin (9):\n docs: fix header in CONTRIBUTING PR 902 38ff0fe refactor: remove dead code from PGStream, implement Closeable PR 901 acff949 refactor: replace some usages of assertTrue PR 957 c759a58 refactor: state of PGXAConnection as enum PR 966 7618822 refactor: make PgStream implements Flushable PR 1008 0c3a2fc style: add MissingDeprecated into checkstyle PR 1019 d74386d chore: update checkstyle PR 1025 69e3b8b refactor: simplify methods in ConnectionFactoryImpl PR 1028 ed27c5b refactor: replace some usages of initCause PR 1037 0c29823  Álvaro Hernández Tortosa (1):\n Add SCRAM-SHA-256 support PR 842 befea18  Barnabas Bodnar (1):\n fix: don’t attempt to read a SQLXML more than once PR 965 8f5e245  Brett Okken (1):\n feat: primitive arrays PR 887 3e0491a  Brett Wooldridge (1):\n Fixes #638 Implement support for get/setNetworkTimeout() PR 849 8a30044  Chen Huajun (1):\n fix: improve multihost connection for preferSlave case (verify expired hosts before connecting to cached master) PR 844 c6fec34  Dave Cramer (11):\n Update thread safety status of the driver to reflect reality; that being that the driver is not thread safe PR 928 ad47aba fix: use 00:00:00 and 24:00:00 for LocalTime. MIN/MAX PR 992 f2d8ec5 fix: support Subject Alternative Names for SSL connections PR 952 2dcb91e test: Appveyor configuration PR 1000 059628f add test for identity, fix isAutoincrement in postgresql 10 fixes #130 PR 1004 2f6633b elaborate on sslmode options PR 1054 aa7a420 prefer the word secondary over slave PR 1063 2e8c2b6 Revert “refactor: replace some usages of initCause PR 1037” (#1064) e6a1ecc prefer secondary over slave referring to standby or secondary servers PR 1070 32c53902 first pass at release notes and some fixes to previous notes PR 1041 a8260f5 Update 2018-01-16-42.2.0-release.md b36867f  Hugh Cole-Baker (1):\n Make GSS JAAS login optional PR 922 d7f0f27  Jeff Klukas (1):\n fix: advance lastReceiveLSN on keepalive messages PR 1038 1be8a9e  Joe Kutner (1):\n fix: Added support for socksNonProxyHosts property PR 975 (#985) 9813c68  Jorge Solorzano (13):\n chore: use mainly Trusty in Travis, reorder CI jobs, and jdk tests PR 939 646a868 fix: ignore replication test until 11.1 to avoid random failures PR 949 ee6443d chore: streamlining jobs PR 959 ed0a398 docs: move changelog to separate file PR 956 e67e8f9 docs: improve website front page PR 968 65170f1 docs: fix test db password in docs PR 984 7df56f8 test: add openj9 to the matrix PR 974 f187645 chore: remove testing of the latest Java updates PR 993 0d8fde6 chore: updates to CHANGELOG.md in release_notes.sh PR 981 bdfc1db test: querymode extendedCacheEverything PR 1007 f574285 fix: first composite query not calling getNativeSql() PR 1020 2cae5a1 drop old and unused crypt auth PR 1026 405f14e chore: collect coverage for Java 7 PR 1030 b629934  Magnus (1):\n fix: make warnings available as soon as they are received PR 857 83dd5fe  Magnus Hagander (1):\n Fix documentation spelling of sslpasswordcallback PR 1021 8ba5841  MichaelZg (1):\n fix: trim trailing zeros in timestamp strings returned in binary mode PR 896 d28deff  Michael Glaesemann (1):\n refactor: use TypeInfo getPGArrayType instead of munging type name PR 913 634e157  Pavel Raiskup (2):\n packaging: rpm_ci: add missing BuildRequires 4e0cdc1 packaging: rpm_ci: don’t shade scram jar into pgjdbc 1fd6c4f  Philippe Marschall (2):\n feat: improve ResultSet#getObject(int, Class) PR 932 fcb28c7 test: add ubenchmark for UTF-8 decoding PR 988 0d918c3  Piyush Sharma (1):\n doc: Added quotes to URL in ‘@see’ tag over org.postgresql.sspi. NTDSAPI#DsMakeSpnW for syntactic correctness PR 926 29f574a  Sehrope Sarkuni (1):\n feat: parse command complete message via regex PR 962 097db5e  Thach Hoang (2):\n Update ServerVersionTest to actually compare versions PR 1015 cccd6cd fix: always return Short[] for java.sql. Array.getArray() on smallint[] PR 1017 279fb43  Vladimir Sitnikov (23):\n fix: reintroduce Driver.getVersion for backward compatibility reasons PR 905 50d5dd3 style: make PGReplicationStream, LargeObject implement AutoCloseable for Java 7+ PR 1016 9f07c9a fix: prevent statement hang in case close() called when query is in progress PR 1022 04c5dbb fix: synchronize Statement#result field access to make #close() more thread-safe 4139248 fix: avoid reflective access to TimeZone.defaultTimeZone in Java 9+ PR 1002 fd0eeee fix: throw TOO_MANY_RESULTS (0100E) instead of “PgResultSet: tuples must be non-null” 0d31d46 fix: “Received resultset tuples, but no field structure for them” when bind failure happens on 5th execution of a statement PR 811 082d009 tests: correct assertion to use proper column 63918eb fix: add type parameter so code is Java 6/7 compatible 1361c52 chore: avoid non-blocking IO for stdout to workaround “stdout: write error” in Travis 12bb084 test: run Travis tests with non-default time zone a3982b4 fix: execute autosave/rollback savepoint via simple queries always to prevent “statement S_xx not exists” when autosaving PR 955 684a699 fix: use ‘time with time zone’ and ‘timestamp with time zone’ values as is and avoid computation with user-provided/default Calendars e8c43f3 test: refactor SetObject310Test to use proper assertion messages and use less statements (make it faster) be06946 refactor: factor out receiveParameterStatus so all the ParameterStatus messages are handled in the same way a94cfea fix: add Provide-Capability OSGi manifest PR 1029 236805b chore: update version to 42.2.0-SNAPSHOT to reflect the next release version e27ee74 packaging: add missing maven-clean-plugin dependency a2ed9b5 chore: introduce release via Travis acb9bdd chore: skip CI builds for tags; skip Fedora and extendedCacheEverything jobs when building pull requests 3ba3b63 fix: avoid NPE from getObject(…, Date.class) and getObject(…, Calendar.class) on null timestamps PR 1071 eb33c4c test: add “as” to test queries so they work with PostgreSQL 8.3 71b3c11 docs: make pgjdbc’s javadocs to inherit base Java documentation eb406dc  Zemian Deng (3):\n refactor: use PGProperty enum instead of text ref for targetServerType, hostRecheckSeconds, loadBalanceHosts PR 912 (#915) b0cfc33 fix: correct javadoc on PGResultSetMetaData.getFormat PR 917 cd77693 fix: Correct DatabaseMetaData.getFunctions() implementation PR 918 8884202  bpd0018 (3):\n docs - change load.md to reflect current practice PR 1058 90535d9 docs: fix the URL regex PR 1057 6c5490f docs: fix no parameter connect string example PR 1056 bb8a315  djydewang (1):\n style: disallowing user to use incomplete fully qualified Check names in config file PR 961 3286c8c  eperez (1):\n Someone forgot to get the next column PR 973 15aec6a  mjanczykowski (1):\n feat: add setURL method to BaseDataSource PR 999 2277ffb  rnveach (1):\n style: remove deprecated maxLineLength from LeftCurlyCheck PR 904 5f083d1  steinarb (1):\n fix: add Provide-Capability org.osgi.service.jdbc. DataSourceFactory to OSGi manifest Issue 1029  zapov (1):\n fix: avoid integer overflow when sending large arguments PR 946 266ed61  Contributors to this release    We thank the following people for their contributions to this release.\nAlexElin\nÁlvaro Hernández Tortosa\nBarnabas Bodnar\nBrett Okken\nBrett Wooldridge\nChen Huajun\nDave Cramer\nHugh Cole-Baker\nJeff Klukas\nJoe Kutner\nJorge Solorzano\nMagnus\nMagnus Hagander\nMichaelZg\nMichael Glaesemann\nPavel Raiskup\nPhilippe Marschall\nPiyush Sharma\nSehrope Sarkuni\nThach Hoang\nVladimir Sitnikov\nZemian Deng\nbpd0018\ndjydewang\neperez\nmjanczykowski\nrnveach\nzapov\n","description":"","title":"PostgreSQL JDBC Driver 42.2.0 Released","uri":"/pgjdbc/changelogs/2018-01-17-42.2.0-release/"},{"categories":null,"content":"Changed     Statements with non-zero fetchSize no longer require server-side named handle. This might cause issues when using old PostgreSQL versions (pre-8.4)+fetchSize+interleaved ResultSet processing combo. Issue 869  Commits by author    AlexElin (4):\n test: migrate tests to JUnit 4 PR 738 5b65e2f4 style: update checkstyle + turn on some rules PR 847 246b759c test: migrate tests to Junit4 PR 883 5c12da16 refactor: remove useless checks in the tests 0221f930  Dave Cramer (2):\n honour PGPORT, PGHOST, PGDBNAME in connection properties PR 862 2951a958 doc: fix spelling mistakes PR 868 757db625  Michael Glaesemann (4):\n test: assume minimum server version 8.3 testing autosave with ALTER 77ee528d test: assume minimum server version 8.3 when testing with uuid ff2717e4 refactor: remove unused import 8afe856e test: assume integer datetimes for timestamp tests PR 873 8287e7f9  Vladimir Sitnikov (7):\n docs: prevent “” from being displayed on the changelog page e1747693 doc: fix anchors for “contributors to this release” c1d743f2 test: fix StringTypeParameterTest to skip preferQueryMode=simple beca1692 chore: install PostgreSQL 9.1 to Trusty builds via apt, and use Precise for Java 6 e960f237 test: make StringTypeParameterTest 8.3+ since 8.2 misses enum types PR 882 ed0014cc fix: named statements were used when fetchSize was non-zero and prepareThreshold=0 PR 870 f0deabf7 test: skip ConcurrentStatementFetch for PostgreSQL \u003c 8.4 PR 884 5334cb6e  Contributors to this release    We thank the following people for their contributions to this release.\nAlexElin\nDave Cramer\nMichael Glaesemann\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.1.4 Released","uri":"/pgjdbc/changelogs/2017-08-01-42.1.4-release/"},{"categories":null,"content":"Fixed     Fix NPE in PreparedStatement.executeBatch in case of empty batch (regression since 42.1.2). PR 867  Commits by author    Vladimir Sitnikov (2):\n doc: ensure changelog uses %Y-%m-%d format, not %Y-%d-%m 5d585aac fix: NPE in PreparedStatement.executeBatch in case of empty batch PR 867 7514552d  Contributors to this release    We thank the following people for their contributions to this release.\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.1.3 Released","uri":"/pgjdbc/changelogs/2017-07-14-42.1.3-release/"},{"categories":null,"content":"Changed     Better logic for returning keyword detection. Previously, pgjdbc could be defeated by column names that contain returning, so pgjdbc failed to “return generated keys” as it considered statement as already having returning keyword PR 824 201daf1d Use server-prepared statements for batch inserts when prepareThreshold\u003e0. Note: this enables batch to use server-prepared from the first executeBatch() execution (previously it waited for prepareThreshold executeBatch() calls) abc3d9d7  Fixed     Replication API: fix issue in #834 setting statusIntervalUpdate causes high CPU load. PR 835 59236b74  Regressions     NPE in PreparedStatement.executeBatch in case of empty batch. Fixed in 42.1.3  Commits by author    AlexElin (1):\n refactor: make PSQLState as enum PR 837 fb5df7fe  Dave Cramer (8):\n Initial support of partitioned tables via JDBC metadata API PR 823 9c3471f2 fix javadoc complaints and some small edits to replication comments PR 832 2d0bfceb fix issue #834 setting statusIntervalUpdate causes high CPU load \\ PR 835 59236b74 fix issue #838 make sure we don’t get columns that are dropped PR 840 464a2d43 add missing connection documentation, fix spelling PR 846 cd400f6f more spelling mistakes for preferQueryMode PR 850 73bc3c1b fix formatting of section on failover, still not perfect but better PR 852 9f722014 small reformat to clarify read and write connections PR 854 551d71b6  Jorge Solorzano (3):\n test: yet another rename to use “lsn” not “location” in Pg10. PR 822 90228621 use zulu-9 PR 828 4ac74886 fix: remove type name from cast exception of getBoolean and setObject PR 781 394b3a2f  Robert ‘Bobby’ Zenz (1):\n fix: Add fallback to setObject(int, Object) for Number PR 812 5b9edb7d  Vladimir Gordiychuk (1):\n bug: floating logical replcation test PR 829 2d3e8972  Vladimir Sitnikov (7):\n chore: implement a script to stage pgjdbc, pgdjbc-jre7, pgjdbc-jre6 artifacts 15d78839 doc: fix 42.1.0.jre8-\u003ejre6 typo PR 42 88942b58 fix: use server-prepared statements for batch inserts when prepareThreshold\u003e0 abc3d9d7 fix: better parsing for returning keyword PR 824 201daf1d docs: build index, changelog pages from _posts/… to reduce release overhead d6fe07d7 chore: make ./release_notes.sh create docs/_posts/$DATE_YMD-$VERS-release.md file e00d4571 docs: add 42.1.2 release notes 6f127a61  Contributors to this release    We thank the following people for their contributions to this release.\nAlexElin\nDave Cramer\nJorge Solorzano\nRobert ‘Bobby’ Zenz\nVladimir Gordiychuk\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.1.2 Released","uri":"/pgjdbc/changelogs/2017-07-12-42.1.2-release/"},{"categories":null,"content":"Fixed     Fix infinite dates that might be corrupted when transferred in binary for certain JREs. For instance, 5881610-07-11 instead of infinity. 1e5bf563  Commits by author    Vladimir Sitnikov (2):\n fix: infinite dates might be corrupted when transferred in binary for certain JREs 1e5bf563 chore: print “include notable changes” to the generated changelog 6bc4fe07  Contributors to this release    We thank the following people for their contributions to this release.\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.1.1 Released","uri":"/pgjdbc/changelogs/2017-05-05-42.1.1-release/"},{"categories":null,"content":"Added     Support fetching a REF_CURSOR using getObject PR 809  Fixed     Fix data being truncated in setCharacterStream (bug introduced in 42.0.0) PR 802 Fix calculation of lastReceiveLSN for logical replication PR 801 Make sure org.postgresql. Driver is loaded when accessing though DataSource interface Issue 768  Regressions     There’s no 42.1.0.jre6 version due to infinity handling bug. Fixed in 42.1.1.jre6  Commits by author    Alexander Kjäll (1):\n documentation typo PR 818 90f5556f  Daniel Migowski (1):\n feat: improve waiting for notifications by providing a timeout option PR 778 a7e0c83b  Dave Cramer (4):\n Update index.html 4d8b1b38 Review the documentation for the replication API PR 756 3e1eb34d fix callproc escape documentation the specification PR 785 95a3f41d Honour setLogStream. If the logStream is set PR 780 b97ad630  Jacques Fuentes (1):\n Make replication docs use PREFER_QUERY_MODE PR 761 bd0497de  James (1):\n fix: use SQLWarning(String reason) constructor for correct DriverManager PR 751 74a426b9  Joe Kutner (1):\n fix: Only resolve hostname if not using a SOCKS proxy PR 774 480b0cf1  Jorge Solorzano (3):\n fix: build site with jekyll 2.2.0 PR 755 773ee679 test: check that new properties follow correct lower camel case PR 740 3f2a02e1 refactor: simplify Encoding class PR 765 ef8c6f96  Philippe Marschall (1):\n feat: support fetching a REF_CURSOR using getObject PR 809 4ab5ccb7  Robert Zenz (1):\n fix: function calls without parameters do not require parentheses 2958cc22  Vladimir Gordiychuk (2):\n chore: fix false alarm on check coredump PR 806 3883a846 bug: fix calculation of lastReceiveLSN for logical replication PR 801 170d9c27  Vladimir Sitnikov (3):\n fix: make sure org.postgresql. Driver is loaded when accessing though DataSource interface PR 768 9c80adc2 refactor: add encoding, fix expected/actual, use proper constructor 77cace40 fix: infinity handling for java.time types PR 789 f375701b  slmsbrhgn (1):\n bug: fix data being truncated in setCharacterStream (the bug introduced in 42.0.0) PR 802 28c98418  Contributors to this release    We thank the following people for their contributions to this release.\nAlexander Kjäll\nDaniel Migowski\nDave Cramer\nJacques Fuentes\nJames\nJoe Kutner\nJorge Solorzano\nPhilippe Marschall\nRobert Zenz\nVladimir Gordiychuk\nVladimir Sitnikov\nslmsbrhgn\n","description":"","title":"PostgreSQL JDBC Driver 42.1.0 Released","uri":"/pgjdbc/changelogs/2017-05-04-42.1.0-release/"},{"categories":null,"content":"Added     Replication protocol API was added: replication API documentation. PR 550 java.util.logging is now used for logging: logging documentation. PR 722 Add support for PreparedStatement.setCharacterStream(int, Reader). ee4c4265  Changed     Version bumped to 42.0.0 to avoid version clash with PostgreSQL version and follow a better semantic versioning. 46634923 Ensure executeBatch() can be used with pgbouncer. Previously pgjdbc could use server-prepared statements for batch execution even with prepareThreshold=0. Issue 742 Error position is displayed when SQL has unterminated literals, comments, etc. Issue 688 Strict handling of accepted values in getBoolean and setObject(BOOLEAN), now it follows PostgreSQL accepted values, only 1 and 0 for numeric types are acepted (previusly !=0 was true). PR 732 Return correct versions and name of the driver. PR 668  Removed     Support for PostgreSQL versions below 8.2 was dropped. PR 661  Deprecated     Deprecated PGPoolingDataSource, instead of this class you should use a fully featured connection pool like HikariCP, vibur-dbcp, commons-dbcp, c3p0, etc. PR 739  Regressions     Data truncated in setCharacterStream. Fixed in 42.1.0 No suitable driver found for jdbc:postgresql when using a DataSource implementation. Fixed in 42.1.0  You may have noticed the change in the versioning of the driver, you can read the FAQ for more information.\nCommits by author    AlexElin (6):\n refactor: use varargs PR 681 50b7fe0f refactor: make HostChooser implement Iterable PR 645 3d37db78 refactor: migrate to Junit4 PR 682 f4a067cc refactor: remove deprecated Utils' methods PR 678 0275d40f refactor: migrate tests to junit4 PR 685 faab4998 refactor: remove checks for jdk version 1.4 (tests) PR 737 ee51dfce  Eric McCormack (1):\n fix: accept server version with more than 3 parts PR 741 8437f6c1  Jordan Lewis (1):\n feat: do not use pg_depend against PostgreSQL 9.0+ PR 689 62e25fba  Jorge Solorzano (22):\n refactor: remove support for postgresql \u003c 8.2 PR 661 14e64be7 fix: add query to support postgresql 8.2 without t.typarray PR 699 cb3995b5 test: add CI tests against PostgreSQL 8.3 PR 710 436365b0 fix: robust castToBoolean for setObject in PreparedStatement PR 714 edc2a14a refactor: remove unused V2ReplicationProtocol.java PR 718 7881e41e test: ignore tests that don’t apply to Pg8.2 and Pg8.3 PR 703 3bc0951e style: reorder checkstyle in travis PR 721 ba812fb4 refactor: remove charset property not used PR 709 f6fd5a5a fix: huntbugs on PgDatabaseMetaData, String concatenation in a loop PR 693 3a00ef94 refactor: fix getDriverVersion, getDriverName and getJDBCMajor/MinorVersion methods PR 668 aa974341 docs: reword supported versions, include datasources section, compare versions PR 673 b2cdd057 test: fix test replication on PG_HEAD PR 734 3b406a18 refactor: deprecated PGPoolingDataSource PR 739 55e2cd16 fix: strict handling of getBoolean and setObject with postgres accepted values PR 732 4942f7d1 docs: move docs from www/documentation/head PR 744 70e23c45 test: fix replication test in Pg10 PR 746 63ed2129 feat: use java.util.logging PR 722 43e6505e perf: short circuit Oid. BOOL in getBoolean PR 745 e69e4a1d fix: add isLoggable around parameterized logger PR 752 8b50cfe5 docs: move www repository to pgjdbc/docs d4e99198 add syntax highlight to documentation 8c035ade add more style 9c510e65  Pavel Raiskup (3):\n fix: sync with latest Fedora PR 637 a29ad80b packaging: rpm: update srpm generator 5c3c9239 packaging: rpm_ci: use curl -L to download rawhide logs c8125cff  Philippe Marschall (3):\n refactor: clean up PgDatabaseMetaData PR 692 d32b077e refactor: delete Keyword enum PR 697 677e3c4c feat: support microsecond resolution for JSR-310 types PR 691 6b3a1efb  Roman Ivanov (2):\n config: move version of checkstyle to property PR 723 9ef7d6f1 chore: upgrade checkstyle to 7.4, make checkstyle version configurable via property PR 725 e1a25782  Steve Ungerer (1):\n fix: ensure executeBatch() does not use server-side prepared statements when prepareThreshold=0 PR 690 aca26a07  Trygve Laugstøl (1):\n feat: connect the socket only if the socket factory created an unconnected socket PR 587 f75572be  Vladimir Gordiychuk (4):\n bug: fix not enscaped special symbol that fail build PR 686 b4604cd7 feat: add replication protocol API PR 550 f48c6bb7 test: fix drop replication slot on 9.4 for tests PR 696 c1c48bd7 chore: Gather backtrace from core dump on CI PR 736 da5e4ef1  Vladimir Sitnikov (12):\n fedora: add BuildRequires: classloader-leak-test-framework 64b6750c tests: remove Class.forName(..driver..) from test code c99507b5 test: add CI tests against PostgreSQL 8.2 PR 659 63ee60e2 feat: display error position when SQL has unterminated literals, comments, etc PR 688 8a95d991 feat: add support for PreparedStatement.setCharacterStream(int, Reader) PR 671 ee4c4265 chore: update next version to 42.0.0-SNAPSHOT 46634923 refactor: add CallableQueryKey#equals override 401c51a1 doc: correct wording in readme regarding PostgreSQL versions used in pgjdbc regression testing 60391d75 fix: revert ExpressionProperties to Properties in BaseDataSource 989b4d23 fix: correct edge cases for setCharacterStream(int, Reader) f1190d8c test: add SharedTimerClassLoaderLeakTest to the regular test suite b3553276 refactor: wrap more log statements with isLoggable check 07d225ec  bd-infor (1):\n docs: clarify handling of loglevel PR 711 6334bac0  Contributors to this release    We thank the following people for their contributions to this release.\nAlexElin\nbd-infor\nEric McCormack\nJordan Lewis\nJorge Solorzano\nPavel Raiskup\nPhilippe Marschall\nRoman Ivanov\nSteve Ungerer\nTrygve Laugstøl\nVladimir Gordiychuk\nVladimir Sitnikov\n","description":"","title":"PostgreSQL JDBC Driver 42.0.0 Released","uri":"/pgjdbc/changelogs/2017-02-20-42.0.0-release/"}]